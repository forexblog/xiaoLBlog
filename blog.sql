/*
 Navicat Premium Data Transfer

 Source Server         : localhost本地
 Source Server Type    : MySQL
 Source Server Version : 50719
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50719
 File Encoding         : 65001

 Date: 09/03/2021 00:09:49
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` bigint(20) NOT NULL COMMENT '博客id',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '标题',
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '描述',
  `first_picture` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '首图地址',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '博客内容',
  `flag` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '原创',
  `published` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否公开',
  `appreciation` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否开启赞赏',
  `commentabled` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否开启评论',
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\r\n创建时间',
  `recommend` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可以回复',
  `share_statement` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否已发布',
  `update_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '更新时间',
  `views` int(11) NULL DEFAULT 0 COMMENT '浏览量',
  `type_id` bigint(20) NULL DEFAULT NULL COMMENT '分类id',
  `user_id` bigint(20) NULL DEFAULT 1 COMMENT '用户id',
  `comment_count` bigint(20) NULL DEFAULT NULL COMMENT '评论次数',
  `is_delete` tinyint(1) NULL DEFAULT 0 COMMENT '逻辑删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK292449gwg5yf7ocdlmswv9w4j`(`type_id`) USING BTREE,
  INDEX `FK8ky5rrsxh01nkhctmo7d48p82`(`user_id`) USING BTREE,
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES (-1, '统计留言', '统计留言', '0', '0', NULL, b'0', b'1', b'1', '2021-02-28 19:15:26', b'1', b'0', '2021-02-28 23:10:19', 0, 0, 1, 19, 0);
INSERT INTO `t_blog` VALUES (1349746223141113858, '旅游网站(一) 完成登录注册、验证码、省份增删改查功能', 'springboot+mybatis+vue实战——旅游网站(一) 完成登录注册、验证码、省份增删改查功能', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3599690714,1456928921&fm=26&gp=0.jpg', '>推荐文章：\n>[springboot整合redis并在项目中使用](https://blog.csdn.net/m0_45234510/article/details/107140114)\n[vue+springboot 登录注册功能](https://blog.csdn.net/m0_45234510/article/details/106414466)\n- --\n\n@[TOC](目录)\n\n# 一、创建数据库\n数据库名：travels\n\n用户表 SQL：\n```java\nCREATE TABLE t_user(\n	id INT(6) PRIMARY KEY AUTO_INCREMENT,\n	username VARCHAR(60),\n	password VARCHAR(60),\n	email VARCHAR(60)\n);\n\n```\n省份表 SQL：\n\n```java\nCREATE TABLE t_province(\n	id INT(6) PRIMARY KEY AUTO_INCREMENT,\n	name VARCHAR(60),\n	tags VARCHAR(80),\n	placecounts INT(4)\n);\n\n```\n景点表 SQL：\n\n```java\nCREATE TABLE t_place(\n	id INT(6) PRIMARY KEY AUTO_INCREMENT,\n	name VARCHAR(60),\n	picpath MEDIUMTEXT,\n	hottime	TIMESTAMP,\n	hotticket	DOUBLE(7,2),\n	dimticket	DOUBLE(7,2),\n	placedes	VARCHAR(300),\n	provinceid	INT(6) REFERENCES t_province(id)\n);\n\n```\n\n# 二、后端环境搭建\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702162959815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702163129714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n- pom.xml\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.6.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.travel</groupId>\n    <artifactId>travels</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>travels</name>\n    <description>travels</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.19</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702165327679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n```java\nserver.port=8081\nspring.application.name=travels\n\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/travels?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\nspring.datasource.name=root\nspring.datasource.password=123456\n\nmybatis.mapper-locations=classpath:com/travel/mapper/*.xml\nmybatis.type-aliases-package=com.travel.travels.entity\n\n```\n\n# 三、实现验证码功能\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702174455225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n## CreateImageCode .java \n\n```java\npackage com.travel.travels.utils;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Random;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\n\npublic class CreateImageCode {\n    // 图片的宽度。\n    private int width = 160;\n    // 图片的高度。\n    private int height = 40;\n    // 验证码字符个数\n    private int codeCount = 4;\n    // 验证码干扰线数\n    private int lineCount = 20;\n    // 验证码\n    private String code = null;\n    // 验证码图片Buffer\n    private BufferedImage buffImg = null;\n    Random random = new Random();\n\n    public CreateImageCode() {\n        creatImage();\n    }\n\n    public CreateImageCode(int width, int height) {\n        this.width = width;\n        this.height = height;\n        creatImage();\n    }\n\n    public CreateImageCode(int width, int height, int codeCount) {\n        this.width = width;\n        this.height = height;\n        this.codeCount = codeCount;\n        creatImage();\n    }\n\n    public CreateImageCode(int width, int height, int codeCount, int lineCount) {\n        this.width = width;\n        this.height = height;\n        this.codeCount = codeCount;\n        this.lineCount = lineCount;\n        creatImage();\n    }\n\n    // 生成图片\n    private void creatImage() {\n        int fontWidth = width / codeCount;// 字体的宽度\n        int fontHeight = height - 5;// 字体的高度\n        int codeY = height - 8;\n\n        // 图像buffer\n        buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics g = buffImg.getGraphics();\n        //Graphics2D g = buffImg.createGraphics();\n        // 设置背景色\n        g.setColor(getRandColor(200, 250));\n        g.fillRect(0, 0, width, height);\n\n\n\n        // 设置字体\n        //Font font1 = getFont(fontHeight);\n        Font font = new Font(\"Fixedsys\", Font.BOLD, fontHeight);\n        g.setFont(font);\n\n        // 设置干扰线\n        for (int i = 0; i < lineCount; i++) {\n            int xs = random.nextInt(width);\n            int ys = random.nextInt(height);\n            int xe = xs + random.nextInt(width);\n            int ye = ys + random.nextInt(height);\n            g.setColor(getRandColor(1, 255));\n            g.drawLine(xs, ys, xe, ye);\n        }\n\n        // 添加噪点\n        float yawpRate = 0.01f;// 噪声率\n        int area = (int) (yawpRate * width * height);\n        for (int i = 0; i < area; i++) {\n            int x = random.nextInt(width);\n            int y = random.nextInt(height);\n\n            buffImg.setRGB(x, y, random.nextInt(255));\n        }\n\n\n        String str1 = randomStr(codeCount);// 得到随机字符\n        this.code = str1;\n        for (int i = 0; i < codeCount; i++) {\n            String strRand = str1.substring(i, i + 1);\n            g.setColor(getRandColor(1, 255));\n            // g.drawString(a,x,y);\n            // a为要画出来的东西，x和y表示要画的东西最左侧字符的基线位于此图形上下文坐标系的 (x, y) 位置处\n\n            g.drawString(strRand, i*fontWidth+3, codeY);\n        }\n\n\n    }\n\n    // 得到随机字符\n    private String randomStr(int n) {\n        String str1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\";\n        String str2 = \"\";\n        int len = str1.length() - 1;\n        double r;\n        for (int i = 0; i < n; i++) {\n            r = (Math.random()) * len;\n            str2 = str2 + str1.charAt((int) r);\n        }\n        return str2;\n    }\n\n    // 得到随机颜色\n    private Color getRandColor(int fc, int bc) {// 给定范围获得随机颜色\n        if (fc > 255)\n            fc = 255;\n        if (bc > 255)\n            bc = 255;\n        int r = fc + random.nextInt(bc - fc);\n        int g = fc + random.nextInt(bc - fc);\n        int b = fc + random.nextInt(bc - fc);\n        return new Color(r, g, b);\n    }\n\n    /**\n     * 产生随机字体\n     */\n    private Font getFont(int size) {\n        Random random = new Random();\n        Font font[] = new Font[5];\n        font[0] = new Font(\"Ravie\", Font.PLAIN, size);\n        font[1] = new Font(\"Antique Olive Compact\", Font.PLAIN, size);\n        font[2] = new Font(\"Fixedsys\", Font.PLAIN, size);\n        font[3] = new Font(\"Wide Latin\", Font.PLAIN, size);\n        font[4] = new Font(\"Gill Sans Ultra Bold\", Font.PLAIN, size);\n        return font[random.nextInt(5)];\n    }\n\n    // 扭曲方法\n    private void shear(Graphics g, int w1, int h1, Color color) {\n        shearX(g, w1, h1, color);\n        shearY(g, w1, h1, color);\n    }\n\n    private void shearX(Graphics g, int w1, int h1, Color color) {\n\n        int period = random.nextInt(2);\n\n        boolean borderGap = true;\n        int frames = 1;\n        int phase = random.nextInt(2);\n\n        for (int i = 0; i < h1; i++) {\n            double d = (double) (period >> 1)\n                    * Math.sin((double) i / (double) period\n                    + (6.2831853071795862D * (double) phase)\n                    / (double) frames);\n            g.copyArea(0, i, w1, 1, (int) d, 0);\n            if (borderGap) {\n                g.setColor(color);\n                g.drawLine((int) d, i, 0, i);\n                g.drawLine((int) d + w1, i, w1, i);\n            }\n        }\n\n    }\n\n    private void shearY(Graphics g, int w1, int h1, Color color) {\n\n        int period = random.nextInt(40) + 10; // 50;\n\n        boolean borderGap = true;\n        int frames = 20;\n        int phase = 7;\n        for (int i = 0; i < w1; i++) {\n            double d = (double) (period >> 1)\n                    * Math.sin((double) i / (double) period\n                    + (6.2831853071795862D * (double) phase)\n                    / (double) frames);\n            g.copyArea(i, 0, 1, h1, 0, (int) d);\n            if (borderGap) {\n                g.setColor(color);\n                g.drawLine(i, (int) d, i, 0);\n                g.drawLine(i, (int) d + h1, i, h1);\n            }\n\n        }\n\n    }\n\n    public void write(OutputStream sos) throws IOException {\n        ImageIO.write(buffImg, \"png\", sos);\n        sos.close();\n    }\n\n    public BufferedImage getBuffImg() {\n        return buffImg;\n    }\n\n    public String getCode() {\n        return code.toLowerCase();\n    }\n\n    //使用方法\n// public void getCode3(HttpServletRequest req, HttpServletResponse response, HttpSession session) throws IOException{\n//        // 设置响应的类型格式为图片格式\n//            response.setContentType(\"image/jpeg\");\n//            //禁止图像缓存。\n//            response.setHeader(\"Pragma\", \"no-cache\");\n//            response.setHeader(\"Cache-Control\", \"no-cache\");\n//            response.setDateHeader(\"Expires\", 0);\n//            CreateImageCode vCode = new CreateImageCode(100,30,5,10);\n//            session.setAttribute(\"code\", vCode.getCode());\n//            vCode.write(response.getOutputStream());\n//     }\n\n}\n```\n## 新建UserController.java\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702174655959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n## 编写接口：/user/getImage\n```java\n@RestController\n@RequestMapping(\"/user\")\n@CrossOrigin // 允许跨域(前后端分离)\n@Slf4j // 日志对象\npublic class UserController {\n    /**\n     * 生成验证码\n     * @throws IOException\n     */\n    @GetMapping(\"/getImage\")\n    public Map<String, String> getImage(HttpServletRequest request) throws IOException {\n        Map<String, String> result = new HashMap<>();\n        CreateImageCode createImageCode = new CreateImageCode();\n        // 获取验证码\n        String securityCode = createImageCode.getCode();\n        // 验证码存入session\n        String key = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n        request.getServletContext().setAttribute(key, securityCode);\n        // 生成图片\n        BufferedImage image = createImageCode.getBuffImg();\n        //进行base64编码\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", bos);\n        String string = Base64Utils.encodeToString(bos.toByteArray());\n        result.put(\"key\", key);\n        result.put(\"image\", string);\n        return result;\n    }\n}\n\n```\n## 效果：\n前端展示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702175001659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\nBase64：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702175604743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n# 四、开发\n## 1、创建前端项目\n参考这里的第一点：[https://blog.csdn.net/m0_45234510/article/details/106414466](https://blog.csdn.net/m0_45234510/article/details/106414466)\n## 2、注册登录前端开发\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702232552769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200703110924881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- 先安装一下axios：`npm install axios --save`\n- 然后在main.js加入：\n\n```java\nimport axios from \'axios\';\n\nVue.prototype.axios = axios;\naxios.defaults.baseURL = \"/api\"\naxios.defaults.withCredentials = true\nVue.use(axios);\n```\n- 在config/index.js中的proxyTable加入下面的api解决跨域问题\n\n```java\nproxyTable: {\n      \'/api\': {\n        target:\'http://localhost:8081\', // 你请求的第三方接口\n        changeOrigin:true, // 在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题\n        pathRewrite:{  // 路径重写，\n          \'^/api\': \'\'  // 替换target中的请求地址，也就是说以后你在请求 http://47.115.12.243 这个地址的时候直接写成/api即可。\n        }\n      },\n    },\n```\n- 在router/index.js配置路由\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702233044841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- Register.vue\n\n```java\n<template>\n    <div>\n        <div id=\"wrap\">\n            <div id=\"header\">\n                <div style=\"float: right;padding-top: 24px\"><span v-text=\"time\"/> &emsp; </div>\n                <h1>旅游信息管理系统</h1>\n            </div>\n            <div id=\"header-bar\"></div>\n            <div id=\"content\" style=\"height: 360px\">\n                <img src=\"img/timg.jpg\" style=\"float: right;height: 320px\">\n                <h2>注册</h2>\n                <form action=\"province/provincelist.html\" method=\"post\">\n                    <label>\n                        <div class=\"label-text\">账&emsp;号：</div>\n                        <input type=\"text\" v-model=\"user.username\" name=\"username\">\n                    </label>\n                    <label>\n                        <div class=\"label-text\">密&emsp;码：</div>\n                        <input type=\"password\" v-model=\"user.password\" name=\"password\">\n                    </label>\n                    <label>\n                        <div class=\"label-text\">邮&emsp;箱：</div>\n                        <input type=\"text\" v-model=\"user.email\" name=\"email\">\n                    </label>\n                    <!--前后端分离的架构, 动态访问验证码-->\n                    <img :src=\"src\" id=\"img-vcode\" @click=\"getImage\" :key=\"key\">\n                    <label>\n                        <div class=\"label-text\">验证码：</div>\n                        <input type=\"text\" v-model=\"code\" name=\"vcode\" style=\"width: 100px\">\n                    </label>\n                    <button type=\"button\" @click=\"saveUserInfo()\">提 交</button>&emsp;\n                    <a href=\"login.html\">去登录</a>\n                </form>\n            </div>\n            <div id=\"footer\">\n                yusael~\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"Register\",\n        data() {\n            return {\n                user: {},\n                code: \"\",\n                src: \"\",\n                key: \"\",\n                time: \"\",\n            }\n        },\n        methods: {\n            saveUserInfo() {\n                if (!this.user.username) {\n                    alert(\'用户名不能为空！\');\n                    return;\n                }\n                if (!this.user.password) {\n                    alert(\'密码不能为空！\');\n                    return;\n                }\n                if (!this.user.email) {\n                    alert(\'邮箱不能为空！\');\n                    return;\n                }\n                // 发送axios\n                this.axios.post(\"/user/register?code=\" + this.code + \"&key=\" + this.key, this.user).then((res) => {\n                    console.log(res);\n                    alert(\"22\")\n                    if (res.data.state) {\n                        alert(res.data.msg + \",点击确定跳转到登录页面!!!\");\n                        // location.href = \'./login.html\';\n                    } else {\n                        alert(res.data.msg);\n                    }\n                });\n            },\n            getImage() {\n                const _this = this;\n                this.axios.get(\"/user/getImage\").then((res) => {\n                    console.log(res);\n                    _this.src = \"data:image/png;base64,\" + res.data.image;\n                    _this.key = res.data.key;\n                })\n            },\n        },\n        created() {\n            this.getImage(); // 获取验证码\n            let now = new Date();\n            this.time = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n        }\n    }\n</script>\n\n<style scoped>\n form {\n            width: 270px;\n        }\n\n        input {\n            width: 70%;\n            background: #eee;\n        }\n\n        input:focus {\n            background: #fff;\n        }\n\n        form {\n            padding: 0 12px 12px;\n        }\n\n        label {\n            display: block;\n            padding-bottom: 12px;\n        }\n\n        #img-vcode {\n            width: 56px;\n            height: 21px;\n            float: right;\n            position: relative;\n            top: 2px;\n            left: -6px\n        }\n\n        .label-text {\n            width: 30%;\n            float: left;\n        }\n</style>\n\n```\n- Login.vue\n\n```java\n<template>\n   <div>\n        <div id=\"wrap\">\n            <div id=\"header\">\n                <div style=\"float: right;padding-top: 24px\"><span v-text=\"time\"/>&emsp;</div>\n                <h1>旅游信息管理系统</h1>\n            </div>\n            <div id=\"header-bar\"></div>\n            <div id=\"content\" style=\"height: 360px\">\n                <img src=\"img/timg.jpg\" style=\"float: right;height: 320px\">\n                <h2>登录</h2>\n                <form action=\"province/provincelist.html\" method=\"post\">\n                    <label>\n                        <div class=\"label-text\">账&emsp;号：</div>\n                        <input type=\"text\" v-model=\"user.username\" name=\"username\">\n                    </label>\n                    <label>\n                        <div class=\"label-text\">密&emsp;码：</div>\n                        <input type=\"password\" v-model=\"user.password\" name=\"password\">\n                    </label>\n                    <!--前后端分离的架构, 动态访问验证码-->\n                    <img :src=\"src\" :key=\"key\" @click=\"getImage\" id=\"img-vcode\" style=\"width: 80px;\">\n                    <label>\n                        <div class=\"label-text\">验证码：</div>\n                        <input type=\"text\" v-model=\"code\" name=\"vcode\" style=\"width: 100px\">\n                    </label>\n                    <button type=\"button\" @click=\"login\">提 交</button>&emsp;\n                    <!-- <a href=\"/register\">去注册</a> -->\n                    <button type=\"button\" @click=\"toregister\">去注册</button>\n                </form>\n            </div>\n            <div id=\"footer\">\n                yusael~\n            </div>\n        </div>\n   </div>\n</template>\n\n<script>\n    export default {\n        name: \"Login\",\n        data() {\n            return {\n                user: {},\n                code: \"\",\n                time: \"\",\n                src: \"\",\n                key: \"\",\n            }\n        },\n        methods: {\n            login() { // 登录\n                if (!this.user.username) {\n                    alert(\'用户名不能为空！\');\n                    return;\n                }\n                if (!this.user.password) {\n                    alert(\'密码不能为空！\');\n                    return;\n                }\n                this.axios.post(\'/user/login?code=\' + this.code + \"&key=\" + this.key, this.user).then((res) => {\n                    console.log(res.data);\n                    localStorage.setItem(\"userid\", res.data.userId);\n                    if (res.data.state) {\n                        alert(res.data.msg + \"点击确定进入主页！\");\n                        location.href = \'./province/provincelist.html\';\n                    } else {\n                        alert(res.data.msg);\n\n                    }\n                });\n            },\n            getImage() {\n                const _this = this;\n                this.axios.get(\"/user/getImage\").then((res) => {\n                    console.log(res.data);\n                    _this.src = \"data:image/png;base64,\" + res.data.image;\n                    _this.key = res.data.key;\n                })\n            },\n            toregister(){\n                this.$router.push(\"/register\")\n            }\n        },\n        created() {\n            this.getImage(); // 获取验证码\n            let now = new Date();\n            this.time = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n        },\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n```\n\n## 3、注册登录后端开发\n- 目录结构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200702233508131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- User.java\n\n```java\npackage com.travel.travels.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString\npublic class User {\n    private String id;\n    private String username;\n    private String password;\n    private String email;\n}\n\n```\n- Result.java (将状态封装起来)\n\n```java\npackage com.travel.travels.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Accessors(chain = true) // 链式调用\npublic class Result {\n    private Boolean state = true;\n    private String msg;\n    private String userId;\n}\n\n```\n- UserDao.java\n\n```java\npackage com.travel.travels.dao;\n\nimport com.travel.travels.entity.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserDao {\n    // 注册用户\n    void save(User user);\n    // 根据用户名查询用户\n    User findByUsername(String username);\n}\n\n```\n- UserMapper.xml\n\n```java\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.travel.travels.dao.UserDao\">\n\n    <!--注册用户-->\n    <insert id=\"save\" parameterType=\"User\" useGeneratedKeys=\"true\" keyProperty=\"id\"> /*id自动生成, 生成之后放到id属性*/\n        INSERT INTO t_user\n        VALUES (#{id}, #{username}, #{password}, #{email})\n    </insert>\n\n    <!--根据用户名查询用户|用户登录-->\n    <select id=\"findByUsername\" parameterType=\"String\" resultType=\"com.travel.travels.entity.User\">\n        SELECT * FROM t_user\n        WHERE username = #{username}\n    </select>\n\n</mapper>\n```\n\n- UserService.java\n\n```java\npackage com.travel.travels.service;\n\nimport com.travel.travels.entity.User;\n\npublic interface UserService {\n    void register(User user);\n    User login(User user);\n}\n\n```\n- UserServiceImpl.java\n\n```java\npackage com.travel.travels.service;\n\nimport com.travel.travels.dao.UserDao;\nimport com.travel.travels.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\n@Transactional\npublic class UserServiceImpl implements UserService{\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public void register(User user) {\n        if (userDao.findByUsername(user.getUsername()) == null) {\n            userDao.save(user);\n        } else {\n            throw new RuntimeException(\"用户名已存在！\");\n        }\n    }\n\n    @Override\n    public User login(User user) {\n        User userDB = userDao.findByUsername(user.getUsername());\n        if (userDB != null) {\n            if (userDB.getPassword().equals(user.getPassword())) {\n                return userDB;\n            }\n            throw new RuntimeException(\"密码输入错误！\");\n        } else {\n            throw new RuntimeException(\"用户名输入错误！\");\n        }\n    }\n\n}\n\n```\n## 4、省份增删改查及分页后端开发\n目录结构：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020070411324351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n- Province.java\n\n```java\npackage com.travel.travels.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\nimport lombok.experimental.Accessors;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString\n@Accessors(chain = true)  //chain 若为true，则setter方法返回当前对象\npublic class Province {\n    private String id;\n    private String name;\n    private String tags;\n    private Integer placecounts;\n\n}\n\n```\n- BaseDao.java（抽取出通用的CRUD）\n\n```java\npackage com.travel.travels.dao;\n\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\npublic interface BaseDao<T,K> {\n    void save(T t);\n    void update(T t);\n    void delete(K k);\n    T findOne(K k);\n\n    List<T> findAll();\n    List<T> findByPage(@Param(\"start\") Integer start, @Param(\"rows\") Integer row);\n    Integer findTotals();\n\n}\n\n```\n- ProvinceDao.java\n\n```java\npackage com.travel.travels.dao;\n\nimport com.travel.travels.entity.Province;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface ProvinceDao extends BaseDao<Province, String>{\n\n}\n\n```\n- ProvinceMapper.xml\n\n```java\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.travel.travels.dao.ProvinceDao\">\n\n    <!--分页查询所有-->\n    <select id=\"findByPage\" resultType=\"Province\">\n        select id,name,tags,placecounts\n        from t_province\n        order by placecounts\n        limit #{start}, #{rows}\n    </select>\n\n    <!--查询总条数，用于计算分页-->\n    <select id=\"findTotals\" resultType=\"Integer\">\n        select count(id) from t_province\n    </select>\n\n    <!--通过名称查询-->\n    <select id=\"findByName\" resultType=\"Province\" parameterType=\"String\">\n        select *\n        from t_province\n        where name like \"%\" #{name} \"%\"\n    </select>\n\n    <!--省份添加-->\n    <insert id=\"save\" parameterType=\"Province\" keyProperty=\"id\" useGeneratedKeys=\"true\">\n         insert into t_province values (#{id},#{name},#{tags},#{placecounts})\n    </insert>\n\n    <!--删除省份-->\n    <delete id=\"delete\" parameterType=\"String\">\n        delete from t_province where id = #{id}\n    </delete>\n\n    <!--查询一个-->\n    <select id=\"findOne\" resultType=\"Province\">\n        select id,name,tags,placecounts\n        from t_province\n        where id = #{id}\n    </select>\n\n    <!--修改省份-->\n    <update id=\"update\" parameterType=\"Province\">\n        update t_province\n        set name = #{name}, tags = #{tags}, placecounts = #{placecounts}\n        where id = #{id}\n    </update>\n\n</mapper>\n```\n- ProvinceService.java\n\n```java\npackage com.travel.travels.service;\n\nimport com.travel.travels.entity.Province;\n\nimport java.util.List;\n\npublic interface ProvinceService {\n    //page:当前页,rows:每页显示记录数\n    List<Province> findByPage(Integer page,Integer rows);\n    //查询\n    List<Province> findByName(String name);\n    //查询总条数\n    Integer findTotals();\n    //保存省份\n    void save(Province province);\n    //删除省份\n    void delete(String id);\n    //查询一个省份\n    Province findOne(String id);\n    //修改省份\n    void update(Province province);\n}\n\n\n```\n\n- ProvinceServiceImpl.java\n\n```java\npackage com.travel.travels.service;\n\nimport com.travel.travels.dao.ProvinceDao;\nimport com.travel.travels.entity.Province;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n@Service\n@Transactional //捕获异常时，要想使事务生效，需要手动抛出RuntimeException异常或者添加rollbackFor = Exception.class\npublic class ProvinceServiceImpl implements ProvinceService{\n\n    @Autowired\n    ProvinceDao provinceDao;\n\n    //分页查找\n    @Override\n    public List<Province> findByPage(Integer page, Integer rows) {\n        // 传入的是当前页数, 以及页面显示的数量\n        // 所以要根据这两个参数计算从mysql中查询数据要从第几行开始查几条\n        int state = (page - 1) * rows; // 计算要查询的数据是从第几条数据开始的\n        return provinceDao.findByPage(state,rows);\n    }\n\n    //查询所有\n    @Override\n    public Integer findTotals() {\n        return provinceDao.findTotals();\n    }\n\n    //添加省份\n    @Override\n    public void save(Province province) {\n        province.setPlacecounts(0);//新省份添加时景点数为0\n        provinceDao.save(province);\n    }\n\n    //删除省份\n    @Override\n    public void delete(String id) {\n        provinceDao.delete(id);\n    }\n\n    //查询一个省份\n    @Override\n    public Province findOne(String id) {\n        return provinceDao.findOne(id);\n    }\n    \n    /**\n     * 通过名称查询\n     * @param name\n     * @return\n     */\n    @Override\n    public List<Province> findByName(String name) {\n        return provinceDao.findByName(name);\n    }\n\n    //修改省份\n    @Override\n    public void update(Province province) {\n        provinceDao.update(province);\n    }\n\n\n}\n\n\n```\n\n- ProvinceController.java\n\n```java\npackage com.travel.travels.controller;\n\nimport com.travel.travels.entity.Province;\nimport com.travel.travels.entity.Result;\nimport com.travel.travels.service.ProvinceService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@CrossOrigin\n@RequestMapping(\"/province\")\npublic class ProvinceController {\n    @Autowired\n    ProvinceService provinceService;\n\n    @GetMapping(\"/findByPage\")\n    public Map<String,Object> findByPage(Integer page, Integer rows){\n        page = page==null? 1 : page;\n        rows = rows==null? 4 : rows;\n        System.out.println(page+ \" : \" + rows);\n        HashMap<String,Object> map = new HashMap<>();\n\n        //分页查询出当前页面显示的数据\n        List<Province> provinces = provinceService.findByPage(page,rows);\n\n        //查询总数据条数\n        Integer totals = provinceService.findTotals();\n        // 计算总页数\n        // 如果总数据条数可以整除每一页数据个数, 说明结果正好为总页数\n        // 如果总数据条数无法整除每一页数据个数, 说明总页数需要结果 + 1\n        Integer totalPage = totals % rows == 0 ? totals/rows : totals/rows + 1;\n\n        map.put(\"provinces\",provinces);\n        map.put(\"page\",page);\n        map.put(\"totalPage\",totalPage);\n        map.put(\"totals\",totals);\n\n        map.forEach((k, v) -> {\n            System.out.println(k + \": \" + v);\n        });\n\n        return map;\n\n    }\n\n    /**\n     * 添加省份\n     * @param province\n     * @return\n     */\n    @PostMapping(\"/save\")\n    public Result save(@RequestBody Province province){\n        Result result = new Result();\n        try{\n            provinceService.save(province);\n            result.setMsg(\"添加省份成功\");\n        }catch (Exception e){\n            e.printStackTrace();\n            result.setState(false).setMsg(\"添加省份失败！\");\n        }\n        return result;\n    }\n\n    /**\n     * 删除省份\n     * @param id\n     * @return\n     */\n    @GetMapping(\"/delete\")\n    public Result delete(String id){\n        Result result = new Result();\n        try{\n            provinceService.delete(id);\n            result.setMsg(\"删除省份成功\");\n        }catch (Exception e){\n            e.printStackTrace();\n            result.setState(false).setMsg(\"删除省份失败！\");\n        }\n        return result;\n    }\n\n    /**\n     * 修改省份\n     * @param province\n     * @return\n     */\n    @PostMapping(\"/update\")\n    public Result update(@RequestBody Province province){\n        Result result = new Result();\n        try{\n            provinceService.update(province);\n            result.setMsg(\"修改省份成功！\");\n        }catch (Exception e){\n            e.printStackTrace();\n            result.setState(false).setMsg(\"修改省份失败\");\n        }\n        return result;\n    }\n\n    /**\n     * 查询一个省份\n     * @param id\n     * @return\n     */\n    @GetMapping(\"/findOne\")\n    public Province findOne(String id){\n        return provinceService.findOne(id);\n    }\n\n\n    /**\n     * 通过名称查询\n     * @param name\n     * @return\n     */\n    @GetMapping(\"/findByName\")\n    public List<Province> findByName(String name){\n        return  provinceService.findByName(name);\n    }\n}\n```\n\n## 5、省份增删改查及分页前端开发\n- 新建组件main.vue\n\n```java\n<template>\n   <div>\n    <div id=\"wrap\">\n        <div id=\"header\">\n            <div style=\"float: right;padding-top: 24px\">\n                {{time}} &emsp;\n                <a @click=\"back_login\" style=\"color:#fff;float: right\">安全退出</a>\n            </div>\n            <h1>旅游信息管理系统</h1>\n        </div>\n        <div id=\"header-bar\"></div>\n        <div id=\"content\" style=\"height: 360px\">\n            <h2>省份列表</h2>\n            <input v-model=\"pname\" @keyup.enter=\"search_ByPname\" type=\"text\" placeholder=\"请输入查询条件\">\n            <table>\n                <thead>\n                <tr>\n                    <th width=\"15%\">ID</th>\n                    <th width=\"20%\">省份</th>\n                    <th width=\"25%\">标签</th>\n                    <th width=\"15%\">景点个数</th>\n                    <th width=\"25%\">操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr v-for=\"province in provinces\" :key=\"province.id\">\n                    <td v-text=\"province.id\"></td>\n                    <td v-text=\"province.name\"></td>\n                    <td v-text=\"province.tags\"></td>\n                    <td v-text=\"province.placecounts\"></td>\n                    <td>\n                        <a href=\"javascript:;\" @click=\"deleteProvince(province.id)\">删除省份</a>\n                        <a :href=\"\'../viewspot/viewspotlist.html?id=\' + province.id\">景点列表</a>\n                        <!-- <a :href=\"\'../update_province?id=\' + province.id\">修改省份</a> -->\n                        <a  href=\"javascript:;\" @click=\"updateProvince(province.id)\">修改省份</a>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <a @click=\"to_addprovince\">\n                <button type=\"button\">添加省份</button>\n            </a>\n            <div id=\"pages\">\n                <!--上一页, 只有当前所在页数>1才会显示-->\n                <a href=\"javascript:;\" class=\"page\" v-if=\"page > 1\" @click=\"findAll(page - 1)\">&lt;上一页</a>\n                <!--页面-->\n                <a href=\"javascript:;\" class=\"page\" v-for=\"indexpage in totalPage\" @click=\"findAll(indexpage)\"\n                   v-text=\"indexpage\"></a>\n                <!--下一页, 只有当前所在页数<总页数才会显示-->\n                <a href=\"javascript:;\" class=\"page\" v-if=\"page < totalPage\" @click=\"findAll(page + 1)\">下一页&gt;</a>\n            </div>\n        </div>\n        <div id=\"footer\">\n            yusael~\n        </div>\n    </div>\n   </div>\n</template>\n\n<script>\n    export default {\n        name: \"Main\",\n        data() {\n            return {\n                provinces: [],\n                page: 1,\n                rows: 4,\n                totalPage: 0,\n                totals: 0,\n                time: \"\",\n                pname:\'广东\',\n            }\n        },\n        methods: {\n            search_ByPname(){\n               const _this = this\n               this.axios.get(\"/province/findByName?name=\"+ this.pname ).then(res =>{\n                    console.log(res)\n                    _this.provinces = res.data;\n               }) \n            },\n            to_addprovince(){\n                this.$router.push(\"/add_province\")\n            },\n            findAll(indexpage) { // 查询某一页的数据\n                if (indexpage) {\n                    this.page = indexpage;\n                }\n                const _this = this; // 保存当前对象, 用于下面的作用域\n                this.axios.get(\"/province/findByPage?page=\" + this.page + \"&rows=\" + this.rows).then((res) => {\n                    console.log(res)\n                    _this.provinces = res.data.provinces;\n                    _this.page = res.data.page;\n                    _this.totalPage = res.data.totalPage;\n                    _this.totals = res.data.totals;\n                });\n            },\n            deleteProvince(id) {\n                if (confirm(\"确定要删除省份信息吗?\")) {\n                    this.axios.get(\"/province/delete?id=\" + id).then((res) => {\n                        if (res.data.state) {\n                            alert(res.data.msg + \"点击确定跳转到省份列表页面!\");\n                            location.reload(true); // 刷新当前页面\n                        } else {\n                            alert(res.data.msg);\n                        }\n                    });\n                }\n            },\n            updateProvince(id){\n                this.$router.push(\"/update_province?id=\"+ id);\n            },\n            back_login(){\n                this.$router.push(\"/login\")\n            },\n        },\n        created() {\n            this.findAll();\n            let now = new Date();\n            this.time = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n        }\n    }\n</script>\n\n<style scoped>\n  table {\n            width: 100%;\n            margin-bottom: 15px;\n            border-collapse: collapse;\n            table-layout: fixed;\n        }\n\n        th, td {\n            border: 1px solid #CBD6DE;\n            padding-left: 10px;\n            line-height: 28px;\n        }\n\n        th {\n            text-align: left;\n            background: linear-gradient(#edf2f5, #dce9f2, #edf2f5);\n            color: #467aa7;\n        }\n\n        tbody tr:nth-child(even) {\n            background: #f2f2f2;\n        }\n\n        #pages {\n            text-align: center;\n            padding-top: 8px;\n        }\n\n        .page {\n            min-width: 50px;\n            display: inline-block;\n        }\n</style>\n\n\n\n```\n- add_province.vue\n\n```java\n<template>\n    <div>\n        <div id=\"wrap\">\n            <div id=\"header\">\n                <div style=\"float: right;padding-top: 24px\">{{time}} &emsp;</div>\n                <h1>旅游信息管理系统</h1>\n            </div>\n            <div id=\"header-bar\"></div>\n            <div id=\"content\" style=\"height: 360px\">\n                <img  style=\"float: right;height: 320px\">\n                <h2>添加省份</h2>\n                <form action=\"provincelist.html\" method=\"post\">\n                    <label>\n                        <div class=\"label-text\">省&emsp;份：</div>\n                        <input type=\"text\" v-model=\"province.name\">\n                    </label>\n                    <label>\n                        <div class=\"label-text\">标&emsp;签：</div>\n                        <input type=\"text\" v-model=\"province.tags\">\n                    </label>\n                    <button type=\"button\" @click=\"saveProvinceInfo\">提 交</button>&emsp;\n                    <a @click=\"back_main\">返回</a>\n                </form>\n            </div>\n            <div id=\"footer\">\n                yusael~\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default{\n        data() {\n            return {\n                province: {},\n                 time: \"\",\n            }\n        },\n        methods: {\n            saveProvinceInfo() {\n                const _this = this\n                this.axios.post(\"/province/save\", this.province).then((res) => {\n                    if (res.data.state) {\n                        alert(res.data.msg + \"点击确定跳转到省份列表页面!\");\n                        _this.$router.push(\'/main\')\n                    } else {\n                        alert(res.data.msg);\n                    }\n                });\n            },\n            back_main(){\n                this.$router.push(\"/main\")\n            }\n        },\n        created() {\n            let now = new Date();\n            this.time = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n        }\n    }\n</script>\n\n<style scoped> \n form {\n            width: 270px;\n        }\n\n        input {\n            width: 70%;\n            background: #eee;\n        }\n\n        input:focus {\n            background: #fff;\n        }\n\n        form {\n            padding: 0 12px 12px;\n        }\n\n        label {\n            display: block;\n            padding-bottom: 12px;\n        }\n\n        .label-text {\n            width: 30%;\n            float: left;\n        }\n</style>\n```\n\n\n- update_province.vue\n\n```java\n<template>\n    <div>\n        <div id=\"wrap\">\n            <div id=\"header\">\n                <div style=\"float: right;padding-top: 24px\">{{time}}&emsp;</div>\n                <h1>旅游信息管理系统</h1>\n            </div>\n            <div id=\"header-bar\"></div>\n            <div id=\"content\" style=\"height: 360px\">\n                <img  style=\"float: right;height: 320px\">\n                <h2>修改省份</h2>\n                <form action=\"provincelist.html\" method=\"post\">\n                    <label>\n                        <div class=\"label-text\">省&emsp;份：</div>\n                        <input type=\"text\" v-model=\"province.name\">\n                    </label>\n                    <label>\n                        <div class=\"label-text\">标&emsp;签：</div>\n                        <input type=\"text\" v-model=\"province.tags\">\n                    </label>\n                    <button type=\"button\" @click=\"updateProvince\">提 交</button>&emsp;\n                    <a @click=\"back_main\">返回</a>\n                </form>\n            </div>\n            <div id=\"footer\">\n                yusael\n            </div>\n        </div>\n\n    </div>\n</template>\n\n<script>\n    export default{\n        data() {\n            return {\n                id: \"\",\n                province: {},\n                time: \"\",\n            }\n        },\n        methods: {\n            findOneProvince() {\n                const _this = this\n                this.axios.get(\"/province/findOne?id=\" + this.id).then((res) => {\n                    _this.province = res.data;\n                });\n            },\n            updateProvince() {\n                const _this = this\n                this.axios.post(\"/province/update\", this.province).then((res) => {\n                    if (res.data.state) {\n                        alert(res.data.msg + \"点击确定跳转到省份列表页面!\");\n                        _this.$router.push(\"/main\")\n                    } else {\n                        alert(res.data.msg);\n                    }\n                });\n            },\n            back_main(){\n                this.$router.push(\"/main\")\n            },\n        },\n        created() {\n            this.id = location.href.substring(location.href.indexOf(\"=\") + 1);\n            this.findOneProvince();\n\n            let now = new Date();\n            this.time = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n        }\n    }\n</script>\n\n<style scoped>\n   form {\n            width: 270px;\n        }\n\n        input {\n            width: 70%;\n            background: #eee;\n        }\n\n        input:focus {\n            background: #fff;\n        }\n\n        form {\n            padding: 0 12px 12px;\n        }\n\n        label {\n            display: block;\n            padding-bottom: 12px;\n        }\n\n        .label-text {\n            width: 30%;\n            float: left;\n        }\n</style>\n```\n\n\n- 在main.js中导入组件并配置路由\n\n```java\nimport Main from \'../components/Main\'\nimport Add_province from \'../components/province/Add_province\'\nimport Update_province from \'../components/province/Update_province\'\n\n//配置导出路由\nexport default new VueRouter({\n  routes:[\n    {\n      path: \'/main\',\n      name: Main,\n      component: Main\n    },\n    {\n      path: \'/add_province\',\n      name: Add_province,\n      component: Add_province\n    },\n    {\n      path: \'/update_province\',\n      name: Update_province,\n      component: Update_province\n    },\n  ]\n})\n\n```\n## 6、效果\n完成了功能，页面后续有空再作调整...\n\n省份列表展示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200703111733816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n添加省份：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200704112220137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n删除省份：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200704112312107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n修改省份：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200704112237211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n模糊查询：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200704131511608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n- --\n>推荐文章：\n>[springboot整合redis并在项目中使用](https://blog.csdn.net/m0_45234510/article/details/107140114)\n[vue+springboot 登录注册功能](https://blog.csdn.net/m0_45234510/article/details/106414466)', '原创', b'1', b'1', b'1', '2021-01-14 23:52:31', b'1', b'1', '2021-02-28 23:11:36', 36, 1350003757823340545, 1, 7, 0);
INSERT INTO `t_blog` VALUES (1350003826215661569, 'SpringBoot+Mybatis+thymeleaf 增删改查', '使用 SpringBoot+Mybatis+thymeleaf 增删改查小例子', 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1767203791,1848851172&fm=26&gp=0.jpg', '@[TOC]\n## 先看效果\n- 列表展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201227103541821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- 根据手机号码查询\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201227103632812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- 添加\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201227103718750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020122710373529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- 编辑\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201227103816203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201227103840787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n- 删除\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202012271040002.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70)\n\n\n\n\n## 1、建表phone_type\n\n```java\nDROP TABLE IF EXISTS `phone_type`;\nCREATE TABLE `phone_type` (\n  `type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT \'类型id\',\n  `number_part` varchar(50) DEFAULT NULL COMMENT \'号码段\',\n  `type_name` varchar(50) DEFAULT NULL COMMENT \'类型名称\',\n  `type_remark` varchar(255) DEFAULT NULL COMMENT \'类型备注\',\n  PRIMARY KEY (`type_id`),\n  KEY `type_id` (`type_id`,`type_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\nINSERT INTO `phone_type` VALUES (\'1\', \'131\', \'中国联通\', \'老号码\');\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113221622457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n## 2、导入依赖并修改配置文件\npom.xml文件：\n```java\n <!-- mybatis -->\n   <dependency>\n       <groupId>org.mybatis.spring.boot</groupId>\n       <artifactId>mybatis-spring-boot-starter</artifactId>\n       <version>2.1.3</version>\n   </dependency>\n   \n <!-- thymeleaf -->\n   <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-thymeleaf</artifactId>\n   </dependency>\n   \n   <!-- mysql -->\n   <dependency>\n       <groupId>mysql</groupId>\n       <artifactId>mysql-connector-java</artifactId>\n       <scope>runtime</scope>\n   </dependency>\n   \n   <!-- web -->\n   <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-web</artifactId>\n   </dependency>\n```\n\napplication. properties：\n需要修改数据库信息和dao包路径\n\n```java\nspring.datasource.url=jdbc:mysql://xx.xx.xx.xx:3306/xx?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\nspring.datasource.username=xx\nspring.datasource.password=xx\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n# thymeleaf\nspring.thymeleaf.mode=HTML5\nspring.thymeleaf.encoding=UTF-8\nspring.thymeleaf.cache=false\nspring.thymeleaf.prefix=classpath:/templates/\nspring.thymeleaf.suffix=.html\n\n# mybatis\nmybatis.mapper-locations=classpath:/mappers/*Mapper.xml\nmybatis.type-aliases-package=com.example.jpa.demo_jpa.dao\n\n```\n\n## 3、实体类\n\n```java\npublic class PhoneType {\n    private String type_id;\n    private String number_part;\n    private String type_name;\n    private String type_remark;\n\n    public String getType_id() {\n        return type_id;\n    }\n\n    public void setType_id(String type_id) {\n        this.type_id = type_id;\n    }\n\n    public String getNumber_part() {\n        return number_part;\n    }\n\n    public void setNumber_part(String number_part) {\n        this.number_part = number_part;\n    }\n\n    public String getType_name() {\n        return type_name;\n    }\n\n    public void setType_name(String type_name) {\n        this.type_name = type_name;\n    }\n\n    public String getType_remark() {\n        return type_remark;\n    }\n\n    public void setType_remark(String type_remark) {\n        this.type_remark = type_remark;\n    }\n}\n```\n## 4、PhoneTypeDao\n\n```java\n@Mapper\npublic interface PhoneTypeDao {\n    PhoneType findByNumber(@Param(\"number_part\") String number_part);\n    void addPhone(PhoneType phoneType);\n    void updatePhone(PhoneType phoneType);\n    void deletePhone(@Param(\"type_id\") String type_id);\n    List<PhoneType> findAll();\n    PhoneType findById(@Param(\"type_id\") String type_id);\n\n}\n```\n\n## 5、PhoneTypeMapper.xml\n这里需要改namespace 和 parameterType 的路径\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.example.jpa.demo_jpa.dao.PhoneTypeDao\" >\n\n    <resultMap id=\"phoneTypeMap\" type=\"com.example.jpa.demo_jpa.model.PhoneType\" >\n        <id column=\"type_id\" property=\"type_id\" jdbcType=\"INTEGER\" />\n        <result column=\"number_part\" property=\"number_part\" jdbcType=\"VARCHAR\" />\n        <result column=\"type_name\" property=\"type_name\" jdbcType=\"VARCHAR\" />\n        <result column=\"type_remark\" property=\"type_remark\" jdbcType=\"VARCHAR\" />\n    </resultMap>\n\n    <select id=\"findByNumber\" resultMap=\"phoneTypeMap\" parameterType=\"String\">\n        select * from phone_type\n        <where>\n            number_part = #{number_part}\n        </where>\n    </select>\n\n    <!--添加-->\n    <insert id=\"addPhone\" parameterType=\"com.example.jpa.demo_jpa.model.PhoneType\">\n        insert into phone_type value (#{type_id},#{number_part},#{type_name},#{type_remark})\n    </insert>\n\n    <!--修改-->\n    <update id=\"updatePhone\" parameterType=\"com.example.jpa.demo_jpa.model.PhoneType\">\n        update phone_type\n        set type_id = #{type_id}, number_part= #{number_part},type_name = #{type_name},type_remark = #{type_remark}\n        where type_id = #{type_id}\n    </update>\n\n    <!--删除-->\n    <delete id=\"deletePhone\" parameterType=\"String\">\n        delete from phone_type where type_id = #{type_id}\n    </delete>\n\n    <!--查询所有-->\n    <select id=\"findAll\"  resultMap=\"phoneTypeMap\">\n        select * from phone_type\n    </select>\n\n    <!--根据id查找-->\n    <select id=\"findById\" resultMap=\"phoneTypeMap\" parameterType=\"com.example.jpa.demo_jpa.model.PhoneType\">\n        select * from phone_type\n        where type_id = #{type_id}\n    </select>\n\n</mapper>\n```\n\n## 6、PhoneTypeService\n\n```java\npublic interface PhoneTypeService {\n    PhoneType findById(String id);\n    List<PhoneType> findAll();\n    void addPhone(PhoneType phoneType);\n    void updatePhone(PhoneType phoneType);\n    void deletePhone(String id);\n\n    PhoneType findByNumber(String number_part);\n}\n```\n## 7、PhoneTypeServiceImpl \n\n```java\n@Service\npublic class PhoneTypeServiceImpl implements PhoneTypeService {\n   @Autowired\n   private PhoneTypeDao phoneTypeDao;\n\n    @Override\n    public PhoneType findById(String id) {\n        return phoneTypeDao.findById(id);\n    }\n\n    @Override\n    public List<PhoneType> findAll() {\n        return phoneTypeDao.findAll();\n    }\n\n    @Override\n    public void addPhone(PhoneType phoneType) {\n         phoneTypeDao.addPhone(phoneType);\n    }\n\n    @Override\n    public void updatePhone(PhoneType phoneType) {\n         phoneTypeDao.updatePhone(phoneType);\n    }\n\n    @Override\n    public void deletePhone(String id) {\n        phoneTypeDao.deletePhone(id);\n    }\n\n\n    @Override\n    public PhoneType findByNumber(String number_part) {\n        return phoneTypeDao.findByNumber(number_part);\n    }\n\n}\n```\n## 8、PhoneTypeController\n\n```java\n@Controller\npublic class PhoneTypeController {\n    @Autowired\n    PhoneTypeService phoneTypeService;\n\n    //查看所有\n    @RequestMapping(\"/\")\n    public String phone_type1(Model model){\n        List<PhoneType> phoneTypes = phoneTypeService.findAll();\n        model.addAttribute(\"phones\",phoneTypes);\n        return \"phone_type.html\";\n    }\n\n    //查看所有\n    @RequestMapping(\"/phone\")\n    public String phone_type(Model model){\n        List<PhoneType> phoneTypes = phoneTypeService.findAll();\n        model.addAttribute(\"phones\",phoneTypes);\n        return \"phone_type.html\";\n    }\n\n    //跳转去添加页面\n    @GetMapping(\"/add\")\n    public String toAdd(Model model){\n        return \"add.html\";\n    }\n\n    //添加操作\n    @PostMapping(\"/add\")\n    public String addPT(PhoneType phoneType){\n       //保存信息\n        phoneTypeService.addPhone(phoneType);\n        //重定向到列表页面\n        return \"redirect:/phone\";\n    }\n\n    //跳转到更新页面\n    @GetMapping(\"/toUpdate/{id}\")\n    public String toUpdate(@PathVariable(\"id\") String id,  Model model){\n        //根据id查出来的信息\n        PhoneType phoneType =  phoneTypeService.findById(id);\n        //将信息返回给页面\n        model.addAttribute(\"phones\",phoneType);\n        return \"update.html\";\n    }\n\n    //更新操作\n    @PostMapping(\"/update\")\n    public String updatePT(PhoneType phoneType){\n        phoneTypeService.updatePhone(phoneType);\n        return \"redirect:/phone\";\n    }\n\n    //通过号码查询\n   @RequestMapping(\"/searchByNumber\")\n    public String findByNumber(HttpServletRequest request, Model model){\n        //获取搜索框的值\n        String search_input = request.getParameter(\"search_number\");\n        //根据号码查询的信息\n       PhoneType phones2 = phoneTypeService.findByNumber(search_input);\n       System.out.println(phones2);\n        //将信息返回给页面\n        model.addAttribute(\"phones\",phones2);\n        return \"phone_type.html\";\n    }\n\n\n    //删除操作\n    @GetMapping(\"/delPhone/{id}\")\n    public String delPhone(@PathVariable(\"id\") String id){\n        phoneTypeService.deletePhone(id);\n        return \"redirect:/phone\";\n    }\n}\n\n```\n## 9、phone_type.html\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>手机号类型</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css\">\n    <script src=\"https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js\"></script>\n</head>\n<style type=\"text/css\">\n    button{\n        padding: 5px 20px 5px 20px;\n        background-color: #8488f0;\n        color: white;\n    }\n</style>\n<body>\n<form action=\"/searchByNumber\">\n    <input type=\"text\" name=\"search_number\" placeholder=\"请输入号码搜索\">\n    <input type=\"submit\" value=\"搜索\"  class=\"btn btn-success\">\n</form>\n\n<div>\n    <a th:href=\"@{/add}\"><button type=\"button\" class=\"btn btn-primary\">添加</button></a>\n    <a th:href=\"@{/phone}\"><button type=\"button\" class=\"btn btn-primary\">查看全部</button></a>\n</div>\n<table class=\"table table-hover\" style=\"width: 70%;\">\n    <thead>\n    <tr>\n        <th>编号</th>\n        <th>手机号码</th>\n        <th>运营商类型</th>\n        <th>备注</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr th:each=\"phone:${phones}\">\n        <td th:text=\"${phone.type_id}\"></td>\n        <td th:text=\"${phone.number_part}\"></td>\n        <td th:text=\"${phone.type_name}\"></td>\n        <td th:text=\"${phone.type_remark}\"></td>\n        <td >\n            <a class=\"btn btn-sm btn-primary\" th:href=\"@{/toUpdate/}+${phone.type_id}\">编辑</a>\n            <a class=\"btn btn-sm btn-danger\" th:href=\"@{/delPhone/}+${phone.type_id}\">删除</a>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n\n</body>\n</html>\n```\n\n## 10、add.html\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>添加</title>\n</head>\n<body>\n<h2>添加信息</h2>\n<form th:action=\"@{/add}\" method=\"post\">\n    <table>\n        <tr>\n            <td><label for=\"InputNum\">手机号</label></td>\n            <td><input name=\"number_part\" type=\"text\" required id=\"InputNum\" placeholder=\"手机号\"></td>\n        </tr>\n        <tr>\n            <td><label for=\"InputName\">运营商</label></td>\n            <td> <input name=\"type_name\" type=\"text\" required id=\"InputName\" placeholder=\"运营商类型\" ></td>\n        </tr>\n        <tr>\n            <td><label for=\"InputText\">备注</label></td>\n            <td> <input name=\"type_remark\" type=\"text\" required id=\"InputText\" placeholder=\"备注\" ></td>\n        </tr>\n        <tr>\n            <td> <button type=\"submit\" >提交</button></td>\n        </tr>\n    </table>\n</form>\n</body>\n</html>\n```\n## 11、update.html\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>更新</title>\n</head>\n<body>\n<h2>更新操作</h2>\n<form th:action=\"@{/update}\" th:method=\"post\">\n    <table>\n        <tr>\n            <td><label>手机号</label></td>\n            <td><input name=\"number_part\" type=\"text\" th:value=\"${phones.number_part}\"></td>\n        </tr>\n        <tr>\n            <td><label>运营商</label></td>\n            <td><input name=\"type_name\" type=\"text\"  th:value=\"${phones.type_name}\"></td>\n        </tr>\n        <tr>\n            <td><label>备注</label></td>\n            <td><input name=\"type_remark\" type=\"text\" th:value=\"${phones.type_remark}\"></td>\n        </tr>\n        <!--id也要传过去，不过这里把id隐藏不显示在页面-->\n        <input name=\"type_id\" type=\"hidden\" th:value=\"${phones.type_id}\"/>\n        <tr>\n            <td> <button type=\"submit\" >提交</button></td>\n        </tr>\n\n    </table>\n</form>\n</body>\n</html>\n```\n\n- -- \n启动项目测试。', '原创', b'1', b'1', b'1', '2021-01-15 16:56:08', b'1', b'1', '2021-02-23 19:55:26', 5, 1350003757823340545, 1, 0, 0);
INSERT INTO `t_blog` VALUES (1350016254991171585, 'SpringBoot《整合mybatis、mybatis一对多和多对一查询》', 'SpringBoot《整合mybatis、mybatis一对多和多对一查询》', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2084914259,1075663300&fm=11&gp=0.jpg', '@[TOC](目录)\n\n# 一、整合mybatis\n## 1、建表phone_type\n\n```java\nDROP TABLE IF EXISTS `phone_type`;\nCREATE TABLE `phone_type` (\n  `type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT \'类型id\',\n  `number_part` varchar(50) DEFAULT NULL COMMENT \'号码段\',\n  `type_name` varchar(50) DEFAULT NULL COMMENT \'类型名称\',\n  `type_remark` varchar(255) DEFAULT NULL COMMENT \'类型备注\',\n  PRIMARY KEY (`type_id`),\n  KEY `type_id` (`type_id`,`type_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\nINSERT INTO `phone_type` VALUES (\'1\', \'131\', \'中国联通\', \'老号码\');\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113221622457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n## 2、导入依赖\n\n```java\n <!-- mybatis -->\n   <dependency>\n       <groupId>org.mybatis.spring.boot</groupId>\n       <artifactId>mybatis-spring-boot-starter</artifactId>\n       <version>2.1.3</version>\n   </dependency>\n```\n\n\n\n## 3、model\n\n```java\n@Entity\n@Table(name = \"phone_type\")\npublic class PhoneType {\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private String type_id;\n    private String number_part;\n    private String type_name;\n    private String type_remark;\n\n    // 省略get/set方法\n}\n```\n## 4、dao\n\n```java\n@Mapper\npublic interface PhoneTypeDao {\n    PhoneType findByNumber(@Param(\"number\") String number);\n}\n```\n\n## 5、mapper\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.example.jpa.demo_jpa.dao.PhoneTypeDao\" >\n\n    <resultMap id=\"phoneTypeMap\" type=\"com.example.jpa.demo_jpa.model.PhoneType\" >\n        <id column=\"type_id\" property=\"type_id\" jdbcType=\"INTEGER\" />\n        <result column=\"number_part\" property=\"number_part\" jdbcType=\"VARCHAR\" />\n        <result column=\"type_name\" property=\"type_name\" jdbcType=\"VARCHAR\" />\n        <result column=\"type_remark\" property=\"type_remark\" jdbcType=\"VARCHAR\" />\n    </resultMap>\n    <select id=\"findByNumber\" resultMap=\"phoneTypeMap\" parameterType=\"String\">\n        select * from phone_type\n        <where>\n            number_part = #{number}\n        </where>\n    </select>\n\n</mapper>\n```\n\n## 6、配置文件\n\n```java\nserver.port=8080\n\nspring.datasource.url=jdbc:mysql://xxx/xxx?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\nspring.datasource.username=\nspring.datasource.password=\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n# mybatis\nmybatis.type-aliases-package=com.example.jpa.demo_jpa.dao\nmybatis.mapper-locations=classpath:/mappers/*Mapper.xml\n\n```\n\n> 注意这里配置mybatis的路径，要跟自己的包所对应\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113224506460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113224533335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n## 7、service \n\n```java\npublic interface PhoneTypeService {\n	//通过号码查找信息\n    PhoneType findByNumber(String number);\n}\n```\n## 8、serviceImpl\n\n```java\n@Service\npublic class PhoneTypeServiceImpl implements PhoneTypeService {\n\n	   @Autowired\n	   private PhoneTypeDao phoneTypeDao;\n	\n	   @Override\n	    public PhoneType findByNumber(String number) {\n	        return phoneTypeDao.findByNumber(number);\n	    }\n}\n```\n## 9、controller\n\n```java\n@RestController\npublic class HelloController {\n\n    @Autowired\n    PhoneTypeService phoneTypeService;\n    \n    @RequestMapping(\"/findByNumber\")\n    public PhoneType findByNumber(String number){\n        return phoneTypeService.findByNumber(\"131\"); //这里为了方便测试，直接写定了这个“131”，实际应该是由前端传来的。\n    }\n    \n}\n```\n\n## 10、测试\n成功查询到号码为“131”的数据信息：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113225527833.png#pic_center)\n## 11、增删改查的mapper（示例）\n\n```java\n    <!--通过文章标题和内容精准查询-->\n    <select id=\"findByTitleText\" resultType=\"com.tweet.tweetapi.domain.Tweet\" resultMap=\"TweetResultMap\">\n        select *\n        from tweet\n        where title = #{title} and text = #{text}\n    </select>\n\n    <!--添加-->\n    <insert id=\"save\" parameterType=\"com.tweet.tweetapi.domain.Tweet\" >\n         insert into tweet values (#{id}, #{title},#{caid},#{tid},#{text})\n    </insert>\n\n    <!--删除-->\n    <delete id=\"delete\" parameterType=\"String\">\n        delete from tweet where id = #{id}\n    </delete>\n\n    <!--修改-->\n    <update id=\"update\" parameterType=\"com.tweet.tweetapi.domain.Tweet\">\n        update tweet\n        set title = #{title}, caid = #{caid}, tid = #{tid}, text = #{text}\n        where id = #{id}\n    </update>\n```\n\n\n# 二、mybatis一对多查询\n\n>场景： 一篇文章（tweet）有多个关键词（keyword），多个关键词对应一篇文章\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113233400622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n## 1、文章实体类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113233211939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n## 2、xml文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113233731168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.tweet.tweetservice.dao.TweetDao\">\n\n    <resultMap id=\"TweetResultMap\" type=\"com.tweet.tweetapi.domain.Tweet\">\n        <result column=\"id\" property=\"id\" jdbcType=\"VARCHAR\"/>\n        <result column=\"title\" property=\"title\" jdbcType=\"VARCHAR\"/>\n        <result column=\"caid\" property=\"caid\" jdbcType=\"VARCHAR\"/>\n        <result column=\"tid\" property=\"tid\" jdbcType=\"VARCHAR\"/>\n        <result column=\"text\" property=\"text\" jdbcType=\"VARCHAR\"/>\n        <collection  property=\"keyWordList\" ofType=\"com.tweet.tweetapi.domain.KeyWord\">\n            <result column=\"kwid\" property=\"kwid\"/>\n            <result column=\"kwname\" property=\"kwname\"/>\n            <result column=\"twid\" property=\"twid\"/>\n        </collection>\n    </resultMap>\n\n    <!--通过id查询-->\n    <select id=\"findById\"  resultMap=\"TweetResultMap\">\n        select *\n        from tweet t,keyword k\n        where t.id = k.twid and t.id = #{twid}\n    </select>\n    \n</mapper>\n```\n\n## 3、效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020111323560397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n# 三、mybatis多对一查询\n## 1、关键词实体类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113234552907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n## 2、xml文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020111323471884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n## 3、效果展示\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201113235716350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n', '转载', b'1', b'1', b'1', '2021-01-15 17:45:31', b'1', b'1', '2021-02-23 19:55:27', 8, 1350003757823340545, 1, 0, 0);
INSERT INTO `t_blog` VALUES (1350017257060728834, 'SpringBoot《集成redis缓存、Linux安装redis》', 'SpringBoot《集成redis缓存、Linux安装redis》', 'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2451921005,155161323&fm=26&gp=0.jpg', '@[TOC](目录)\n\n# 一、springboot整合redis缓存\n## 1、下载安装redis\n\n> 可以参考这篇文章的第二点：[https://blog.csdn.net/m0_45234510/article/details/106504401](https://blog.csdn.net/m0_45234510/article/details/106504401)\n\n安装完成后启动redis并留着在后台运行\n\n## 2、导入依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224151165.png#pic_center)\n\n\n```java\n        <!-- redis -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\n## 3、添加redis配置\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224210558.png#pic_center)\n\n```java\n# redis配置  默认密码为空\nspring.redis.database=0\nspring.redis.host=localhost\nspring.redis.port=6379\nspring.redis.password=\n```\n## 4、测试使用redis（需提前打开redis）：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224349682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224459121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n刷新页面（ay 即为redis中的数据）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224412581.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031224506581.png#pic_center)\n\n\n\n## 6、实现初始化用户数据到Redis缓存\n之所以要把数据放到缓存中，是因为用户的数据属于变动不大的数据，适合放到缓存中，在应用需要获取用户数据时，可以直接到Redis获取，提高数据访问速度\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031225456856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031225515483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n```java\npackage com.example.jpa.demo_jpa.listener;\n\nimport com.example.jpa.demo_jpa.model.AyUser;\nimport com.example.jpa.demo_jpa.model.Visit;\nimport com.example.jpa.demo_jpa.service.AyUserService;\nimport com.example.jpa.demo_jpa.service.VisitService;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport javax.annotation.Resource;\nimport javax.servlet.ServletRequestEvent;\nimport javax.servlet.ServletRequestListener;\nimport javax.servlet.annotation.WebListener;\nimport java.util.List;\n\n@WebListener\npublic class RequestListener implements ServletRequestListener {\n    @Resource\n    VisitService visitService;\n    @Resource\n    private AyUserService ayUserService;\n    private static final String ALL_USER = \"ALL_USER_LIST\";\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n        System.out.println(\"---------------------------->请求Listener销毁\");\n    }\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        System.out.println(\"---------------------------->请求Listener创建\");\n\n        //查询数据库所有的用户\n        List<AyUser> ayUsers = ayUserService.findAll();\n        //清除redis中的缓存数据\n        redisTemplate.delete(ALL_USER);\n        //将visit数据存到Redis缓存中\n        redisTemplate.opsForList().leftPushAll(ALL_USER, ayUsers);\n        //真实项目中需要注释掉\n        List<AyUser> queryAyUserList = redisTemplate.opsForList().range(ALL_USER,0,-1);\n        System.out.println(\"缓存中的访问次数为：\" + queryAyUserList.size() + \"人！！！\");\n\n    }\n}\n```\n\n## 7、实体表中需要序列化\n\n因为RedisTemplate默认使用jdkSerializationRedisSerializer，而StringRedisTemplate默认使用StringRedisSerializer。所以实体类需要实现序列化接口Serializable。如下操作：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031230151132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\npublic class AyUser implements Serializable {\n```\n\n## 8、findById示例\n其他的Save/Delete方法与这类似\n\n思路：我们首先是查找Redis缓存中的数据，有就返回，没有就查找数据库中的数据，有就更新缓存并返回数据，没有就返回空。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031230710129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n@Service\npublic class AyUserServiceImpl implements AyUserService {\n    @Resource\n    private AyUserRepository ayUserRepository;\n    \n    @Resource\n    RedisTemplate redisTemplate;\n    private static final String ALL_USER = \"ALL_USER_LIST\";\n    \n    @Override\n    public AyUser findbyId(String id) {\n        //step.1 查询Redis缓存中的所有数据\n        List<AyUser> ayUserList = redisTemplate.opsForList().range(ALL_USER,0,-1);\n        if (ayUserList != null&&ayUserList.size() >0){\n            for (AyUser ayUser:ayUserList\n                    ) {\n                if (ayUser.getId().equals(id)){\n                    return ayUser;\n                }\n            }\n        }\n        //step.2 查询数据库中的数据\n        AyUser ayUser = ayUserRepository.findById(id).get();\n        if (ayUser != null){\n            //step.3 将数据插入到Redis缓存中\n            redisTemplate.opsForList().leftPush(ALL_USER,ayUser);\n        }\n        return ayUser;\n    }\n}\n```\n\n## 9、测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031230824709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n    @Autowired\n    AyUserService ayUserService;\n\n    @Resource\n    RedisTemplate redisTemplate;\n\n    @Test\n    public void testFindById_redis(){\n        Long redisUserSize = 0L;\n        //查询id = 2 的数据，该数据存在于Redis缓存中\n        AyUser ayUser = ayUserService.findbyId(\"2\");\n        redisUserSize = redisTemplate.opsForList().size(\"ALL_USER_LIST\");\n        System.out.println(\"目前缓存中的用户数量为：\" + redisUserSize);\n        System.out.println(\"----> id: \" + ayUser.getId() + \"   name: \" + ayUser.getName());\n    }\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201031230829989.png#pic_center)\n\n# 二、Linux服务器安装redis\n## 1、用xsheel连接服务器\n\n```java\ncd /usr/local \n\nmkdir redis   # 创建redis目录\n```\n## 2、环境准备\n\n```java\nyum  install  -y  gcc\nyum  install  -y  make\n```\n\n## 3、下载Redis\n下载命令：\n\n```java\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\n```\n\n> 注意：若下载redis-6版本，此方法无效；若wget下载命令无效，可以在本地下载再上传到服务器对应的目录 /usr/local/redis下\n\n可能出现的问题：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110223342760.png#pic_center)\n解决方法：\n\n登入root（VPS）\n\n```java\nsudo vim /etc/resolv.conf\n```\n\n修改内容为下：\n\n```java\nnameserver 8.8.8.8 #google域名服务器\nnameserver 8.8.4.4 #google域名服务器\n```\n重新执行：\n\n```java\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\n```\n\n即可成功下载：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102233708394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n## 4、解压安装命令：\n\n```java\ncd  /usr/local/redis                #进入目录\ntar xzf redis-5.0.5.tar.gz   		#解压软件包\ncd  redis-5.0.5   	                #进入目录\nmake								#安装\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102234009512.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102234027889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n## 5、设置redis服务后台启动和外网可访问\n如图所示，在/redis-5.0.5目录下，打开配置文件：\n\n```java\nvi redis.conf\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102234120152.png#pic_center)\n\n - 把bind 127.0.0.1 注释掉，表示任何ip可访问本机redis服务器\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102234527118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n- 把保护模式设置为no，这个在后面连接的时候会说开启保护模式无法连接，所以得把它关了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201103000345694.png#pic_center)\n\n\n- 把daemonize 设置为 yes 表示后台开启\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020110223462766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)、\n\n\n保存退出\n\n```java\n按Esc 然后输入 :wq\n```\n\n## 6、开启redis服务\n以配置文件的模式开启redis服务：\n\n```java\nsrc/redis-server  redis.conf \n```\n查看是否对所有ip开放\n\n```java\nnetstat -anp |grep redis\n\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102235255687.png#pic_center)\n测试是否启动成功：\n\n```java\nsrc/redis-cli\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102235356879.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102235416680.png#pic_center)\n\n## 7、开放6379端口\n查看防火墙是否开启\n```java\n firewall-cmd --state \n```\n如果没有开启，则需要开启防火墙 指令\n\n```java\nsystemctl start firewalld.service\n```\n\n开放6379端口\n\n```java\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent\n```\n\n重启服务器\n\n```java\n systemctl restart firewalld.service \n```\n\n重新加载\n\n```java\n firewall-cmd --reload\n```\n\n> **注意：如果是云服务器还要设置安全组**\n\n## 8、测试本地连接服务器redis\n重启服务\n\n```java\nsrc/redis-cli -p 6379 shutdown\nsrc/redis-server redis.conf\nnetstat -anp |grep redis\n```\n\n用redis可视化工具连接，成功！\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201103001301597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n## 9、映射路径\n\n```clike\nln -s /usr/local/redis/redis-5.0.5/src/redis-cli /usr/bin/redis-cli\n```\n这样，在其他位置使用 `redis-cli` 就能直接使用了，不需要进入相应的目录执行。\n\n参考链接：https://blog.csdn.net/weixin_43520670/article/details/109430756', '原创', b'1', b'1', b'1', '2021-01-15 17:49:30', b'1', b'1', '2021-02-23 19:55:29', 69, 1350003757823340545, 1, 0, 0);
INSERT INTO `t_blog` VALUES (1350017862483345409, 'Springboot《整合JPA、thymeleaf、监听器和过滤器、增删改查小案例》', 'Springboot《整合JPA、thymeleaf、监听器和过滤器、增删改查小案例》', 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3807662522,345950890&fm=15&gp=0.jpg', '@[TOC](目录)\n\n# 一、整合JPA\n## 1、添加依赖\n\n```java\n		<dependency>\n			<groupId>mysql</groupId>\n			<artifactId>mysql-connector-java</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-jdbc</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-jpa</artifactId>\n		</dependency>\n```\n## 2、创建数据库(mydb2019)和表\n\n```java\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for ay_user\n-- ----------------------------\nDROP TABLE IF EXISTS `ay_user`;\nCREATE TABLE `ay_user`  (\n  `id` int(11) NOT NULL,\n  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n\n-- ----------------------------\n-- Records of ay_user\n-- ----------------------------\nINSERT INTO `ay_user` VALUES (1, \'libai\', \'123456\');\n\n-- ----------------------------\n-- Table structure for checking_in\n-- ----------------------------\nDROP TABLE IF EXISTS `checking_in`;\nCREATE TABLE `checking_in`  (\n  `id` int(11) NOT NULL,\n  `employee_id` int(11) NULL DEFAULT NULL,\n  `employee_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `work_day` int(11) NULL DEFAULT NULL,\n  `month_rest_day` int(11) NULL DEFAULT NULL,\n  `leave_day` int(11) NULL DEFAULT NULL,\n  `late_min` int(11) NULL DEFAULT NULL,\n  `fine_money` int(11) NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n\n-- ----------------------------\n-- Table structure for phone_type\n-- ----------------------------\nDROP TABLE IF EXISTS `phone_type`;\nCREATE TABLE `phone_type`  (\n  `type_id` int(11) NOT NULL AUTO_INCREMENT,\n  `number_part` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `type_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `type_remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  PRIMARY KEY (`type_id`) USING BTREE,\n  INDEX `type_id`(`type_id`, `type_name`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n\n-- ----------------------------\n-- Records of phone_type\n-- ----------------------------\nINSERT INTO `phone_type` VALUES (1, \'15100000000\', \'中国联通\', \'10010\');\nINSERT INTO `phone_type` VALUES (3, \'111111111\', \'中国移动\', \'test\');\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n```\n\n## 3、修改数据库连接等配置\n\n```java\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/mydb2019?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\nspring.datasource.name=root\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n\n## 4、新建model/AyUser 实体类\n\n```java\n@Entity\n@Table(name=\"ay_user\")\npublic class AyUser {\n    @Id //声明主键\n    @GeneratedValue(strategy=GenerationType.IDENTITY)  //主键策略\n    private String id;\n    private String name;\n    private String password;\n\n	//省略get/set方法\n}\n```\n## 5、新建AyUserRepository\n\n```java\npublic interface AyUserRepository extends JpaRepository<AyUser,String> {\n}\n```\n\n## 6、AyUserService\n\n```java\npublic interface AyUserService {\n    AyUser findbyId(String id);\n    List<AyUser> findAll();\n    AyUser save(AyUser ayUser);\n    void delete(String id);\n}\n\n```\n## 7、AyUserServiceImpl\n\n```java\n@Service\npublic class AyUserServiceImpl implements AyUserService {\n    @Resource\n    private AyUserRepository ayUserRepository;\n    @Override\n    public AyUser findbyId(String id) {\n        return ayUserRepository.findById(id).orElse(null);\n    }\n    @Override\n    public List<AyUser> findAll() {\n        return ayUserRepository.findAll();\n    }\n    @Override\n    public AyUser save(AyUser ayUser) {\n        return ayUserRepository.save(ayUser);\n    }\n    @Override\n    public void delete(String id) {\n        ayUserRepository.deleteById(id);\n    }\n}\n```\n## 8、HelloController\n\n```java\n@RestController\npublic class HelloController {\n    @Autowired\n    AyUserService myService;\n    @RequestMapping(\"/hello\")\n    public String First() {\n        return myService.findAll().get(0).getName();\n    }\n\n}\n```\n## 9、测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020101621390275.png#pic_center)\n# 二、整合thymeleaf\n## 1、添加依赖\n\n```java\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n```\n\n## 2、修改配置文件\n\n```java\nspring.thymeleaf.mode=HTML5\nspring.thymeleaf.encoding=UTF-8\nspring.thymeleaf.cache=false\nspring.thymeleaf.prefix=classpath:/templates/\nspring.thymeleaf.suffix=.html\n```\n\n## 3、index.html\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201016213614284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>hello</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n</head>\n<body>\n<table border=\"1\" cellspacing=\"0\">\n    <tr>\n        <td>用户名</td>\n        <td>密码</td>\n    </tr>\n    <tr th:each=\"user:${users}\">\n        <td th:text=\"${user.name}\"></td>\n        <td th:text=\"${user.password}\"></td>\n    </tr>\n</table>\n</body>\n</html>\n```\n\n## 4、AyUserController \n\n```java\n@Controller\npublic class AyUserController {\n    @Resource\n    private AyUserService ayUserService;\n\n    @RequestMapping(\"/showusers\")\n    public String showusers( Model model) {\n        List<AyUser> ayUser=ayUserService.findAll();\n        model.addAttribute(\"users\",ayUser);\n        return \"index\";\n    }\n\n}\n```\n\n## 5、测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020101621413432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n# 三、开启事务\n在ServiceImpl 方法或者类上添加 `@Transactional`  注解即可。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201016214607738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n# 四、Filter过滤器 和 Listener监听器\n## 1、过滤器\n\n> 过滤器和拦截器在功能方面很类似，但是在具体技术实现方面，差距还是比较大的。在面向对象编程的过程中，我们很容易通过继承、多态来解决纵向扩展。 但是对于横向的功能，比如，在所有的service方法中开启事务，或者统一记录日志等功能，面向对象的是无法解决的。所以AOP——面向切面编程其实是面向对象编程思想的一个补充。而过滤器和拦截器都属于面向切面编程的具体实现。而两者的主要区别包括以下几个方面：\n　　1、Filter是依赖于Servlet容器，属于Servlet规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。\n　　2、Filter的执行由Servlet容器回调完成，而拦截器通常通过动态代理的方式来执行。\n　　3、Filter的生命周期由Servlet容器管理，而拦截器则可以通过IoC容器来管理，因此可以通过注入等方式来获取其他Bean的实例，因此使用会更方便。\n\n## 2、新建UrlFilter 类\n当访问/success/info时，正常访问；访问/success/ 下的其他页面时，会跳转到/failed 页面。\n```java\n@WebFilter(filterName = \"test\", urlPatterns = \"/success/*\")\npublic class UrlFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"----------------------->过滤器被创建\");\n    }\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest) servletRequest;\n        String requestURI = req.getRequestURI();\n        System.out.println(\"--------------------->过滤器：请求地址\"+requestURI);\n        if(!requestURI.contains(\"info\")){\n            servletRequest.getRequestDispatcher(\"/failed\").forward(servletRequest, servletResponse);\n        }else{\n            filterChain.doFilter(servletRequest, servletResponse);\n        }\n    }\n    @Override\n    public void destroy() {\n        System.out.println(\"----------------------->过滤器被销毁\");\n    }\n}\n```\n\n## 3、HelloController\n添加/failed 和/success/info 两个接口\n\n```java\n@RestController\npublic class HelloController {\n    @Autowired\n    AyUserService myService;\n    @RequestMapping(\"/hello\")\n    public String First() {\n        return myService.findAll().get(0).getName();\n    }\n\n    @RequestMapping(\"/failed\")\n    public Map<String, String> requestFailed(){\n\n        Map<String, String> map = new HashMap<>();\n        map.put(\"code\", \"-1\");\n        map.put(\"msg\", \"请求错误\");\n        return map;\n    }\n\n    @RequestMapping(\"/success/info\")\n    public AyUser userInfo(){\n        AyUser user = new AyUser();\n        user.setName(\"xiaodong\");\n        user.setPassword(\"123456\");\n        user.setId(\"2020\");\n        return user;\n    }\n\n}\n\n```\n\n## 4、在启动类添加注解\n\n```java\n@ServletComponentScan\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201016215553611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n## 5、测试\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201016215255101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n## 6、监听器\n\n> 监听器也叫Listener,是servlet的监听器，可以用于监听Web应用中某些对象，信息的创建，销毁，增加，修改，删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化时，服务器自动调用监听器对象中的方法，常用于统计在线人数和在线用户，系统加载时进行信息初始化，统计网站的访问量等。\n\n## 7、新建RequestListener 类\n\n```java\n@WebListener\npublic class RequestListener implements ServletRequestListener {\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n        System.out.println(\"---------------------------->请求Listener销毁\");\n    }\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        System.out.println(\"---------------------------->请求Listener创建\");\n    }\n}\n\n```\n## 7、测试\n当访问页面时，控制台打印：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201016215817667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n# 五、增删改查小案例\n\n## 1、PhoneType\n\n```java\n@Entity\n@Table(name = \"phone_type\")\npublic class PhoneType {\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private String type_id;\n    private String number_part;\n    private String type_name;\n    private String type_remark;\n\n    public String getType_id() {\n        return type_id;\n    }\n\n    public void setType_id(String type_id) {\n        this.type_id = type_id;\n    }\n\n    public String getNumber_part() {\n        return number_part;\n    }\n\n    public void setNumber_part(String number_part) {\n        this.number_part = number_part;\n    }\n\n    public String getType_name() {\n        return type_name;\n    }\n\n    public void setType_name(String type_name) {\n        this.type_name = type_name;\n    }\n\n    public String getType_remark() {\n        return type_remark;\n    }\n\n    public void setType_remark(String type_remark) {\n        this.type_remark = type_remark;\n    }\n}\n\n```\n\n## 2、PhoneTypeRepository\n\n```java\npublic interface PhoneTypeRepository extends JpaRepository<PhoneType,String> {\n}\n```\n## 3、PhoneTypeService\n\n```java\npublic interface PhoneTypeService {\n    PhoneType findById(String id);\n    List<PhoneType> findAll();\n    PhoneType save(PhoneType phoneType);\n    void delete(String id);\n}\n\n```\n## 4、PhoneTypeServiceImpl\n\n```java\n@Service\npublic class PhoneTypeServiceImpl implements PhoneTypeService {\n   @Resource\n   private PhoneTypeRepository phoneTypeRepository;\n\n    @Override\n    public PhoneType findById(String id) {\n        return phoneTypeRepository.findById(id).orElse(null);\n    }\n\n    @Override\n    public List<PhoneType> findAll() {\n        return phoneTypeRepository.findAll();\n    }\n\n    @Override\n    public PhoneType save(PhoneType phoneType) {\n        return phoneTypeRepository.save(phoneType);\n    }\n\n\n    @Override\n    public void delete(String id) {\n         phoneTypeRepository.deleteById(id);\n    }\n}\n\n```\n\n## 5、PhoneTypeController \n\n```java\n\n@Controller\npublic class PhoneTypeController {\n    @Autowired\n    PhoneTypeService phoneTypeService;\n    String uid;\n\n    @RequestMapping(\"/phone\")\n    public String phone_type(Model model){\n        List<PhoneType> phoneTypes = phoneTypeService.findAll();\n        model.addAttribute(\"phones\",phoneTypes);\n        return \"phone_type.html\";\n    }\n\n    //跳转去添加页面\n    @GetMapping(\"/add\")\n    public String toAdd(Model model){\n        return \"phoneType/add.html\";\n    }\n\n    //添加操作\n    @PostMapping(\"/add\")\n    public String addPT(PhoneType phoneType){\n       //保存信息\n        phoneTypeService.save(phoneType);\n        //重定向到列表页面\n        return \"redirect:/phone\";\n    }\n\n    //跳转到更新页面\n    @GetMapping(\"/toUpdate/{id}\")\n    public String toUpdate(@PathVariable(\"id\") String id,  Model model){\n        //根据id查出来的信息\n        PhoneType phoneType =  phoneTypeService.findById(id);\n        uid = id;\n\n        //将信息返回给页面\n        model.addAttribute(\"phones\",phoneType);\n        return \"phoneType/update.html\";\n\n    }\n\n    //更新操作\n    @PostMapping(\"/update\")\n    public String updatePT(PhoneType phoneType){\n        //根据id查出来的信息\n        PhoneType py =  phoneTypeService.findById(uid);\n        py.setType_name(phoneType.getType_name());\n        py.setNumber_part(phoneType.getNumber_part());\n        py.setType_remark(phoneType.getType_remark());\n        phoneTypeService.save(py);\n        return \"redirect:/phone\";\n    }\n\n    //删除操作\n    @GetMapping(\"/delPhone/{id}\")\n    public String delPhone(@PathVariable(\"id\") String id){\n        phoneTypeService.delete(id);\n        return \"redirect:/phone\";\n    }\n}\n```\n\n## 6、列表页面\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>手机号类型</title>\n</head>\n<style type=\"text/css\">\n    button{\n        padding: 5px 20px 5px 20px;\n        background-color: #8488f0;\n        color: white;\n    }\n</style>\n<body>\n<div>\n    <!--<input type=\"text\"><button>点我查询</button>-->\n    <a th:href=\"@{/add}\"><button>添加</button></a>\n</div>\n<table border=\"1\" cellspacing=\"0\">\n    <thead>\n    <tr>\n        <th>编号</th>\n        <th>手机号码</th>\n        <th>运营商类型</th>\n        <th>备注</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr th:each=\"phone:${phones}\">\n        <td th:text=\"${phone.type_id}\"></td>\n        <td th:text=\"${phone.number_part}\"></td>\n        <td th:text=\"${phone.type_name}\"></td>\n        <td th:text=\"${phone.type_remark}\"></td>\n        <td >\n            <a class=\"btn btn-sm btn-primary\" th:href=\"@{/toUpdate/}+${phone.type_id}\">编辑</a>\n            <a class=\"btn btn-sm btn-danger\" th:href=\"@{/delPhone/}+${phone.type_id}\">删除</a>\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n</body>\n</html>\n```\n\n## 7、添加页面\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>添加</title>\n</head>\n<body>\n<h2>添加信息</h2>\n<form th:action=\"@{/add}\" method=\"post\">\n    <table>\n        <tr>\n            <td><label for=\"InputNum\">手机号</label></td>\n            <td><input name=\"number_part\" type=\"text\" required id=\"InputNum\" placeholder=\"手机号\"></td>\n        </tr>\n        <tr>\n            <td><label for=\"InputName\">运营商</label></td>\n            <td> <input name=\"type_name\" type=\"text\" required id=\"InputName\" placeholder=\"运营商类型\" ></td>\n        </tr>\n        <tr>\n            <td><label for=\"InputText\">备注</label></td>\n            <td> <input name=\"type_remark\" type=\"text\" required id=\"InputText\" placeholder=\"备注\" ></td>\n        </tr>\n        <tr>\n            <td> <button type=\"submit\" >提交</button></td>\n        </tr>\n    </table>\n</form>\n</body>\n</html>\n```\n\n## 8、更新页面\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>更新</title>\n</head>\n<body>\n<h2>更新操作</h2>\n<form th:action=\"@{/update}\" th:method=\"post\">\n    <table>\n        <tr>\n            <td><label>手机号</label></td>\n            <td><input name=\"number_part\" type=\"text\" th:value=\"${phones.number_part}\"></td>\n        </tr>\n        <tr>\n            <td><label>运营商</label></td>\n            <td><input name=\"type_name\" type=\"text\"  th:value=\"${phones.type_name}\"></td>\n        </tr>\n        <tr>\n            <td><label>备注</label></td>\n            <td><input name=\"type_remark\" type=\"text\" th:value=\"${phones.type_remark}\"></td>\n        </tr>\n        <tr>\n            <td> <button type=\"submit\" >提交</button></td>\n        </tr>\n    </table>\n</form>\n</body>\n</html>\n```\n## 9、效果\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201018193446906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n添加\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201018194136807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202010181941538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n更新\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201018194229911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201018194240913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n删除编号18的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201018194256238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n', '原创', b'1', b'1', b'1', '2021-01-15 17:51:55', b'1', b'1', '2021-02-23 19:55:31', 17, 1350003757823340545, 1, 0, 0);
INSERT INTO `t_blog` VALUES (1350053816522887170, 'SpringBoot《jar包部署、war包部署》', 'SpringBoot《jar包部署、war包部署》', 'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=209946149,367802997&fm=26&gp=0.jpg', '@[TOC](目录)\n\n# 一、jar包部署\n## 1、打war包\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108231549943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n## 2、开放端口\n检查防火墙状态\n\n```java\n firewall-cmd --state\n```\nrunning 表示防火墙是开启的，如果你看到的是 not running，防火墙关闭，需要开启 systemctl start firewalld.service\n\n开放 8080 端口 \n\n```java\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\n```\n\n重启防火墙\n\n```java\nsystemctl restart firewalld.service\n```\n\n重新载入配置\n\n```java\n firewall-cmd --reload\n```\n\n## 3、部署\n把在项目的target目录下的war包上传到服务器，然后运行命令：\n\n\n进入目录 cd apache-tomcat-9.0.34/bin\n再执行启动命令  ./startup.sh\n（首先确保tomcat已经启动了）\n\n一次启动：\n\n```java\njava -jar demo.jar\n```\n\n后台一直启动：\n\n```java\nnohup java -jar test.jar >logs.txt 2>&1 &\n```\n其他命令：\n\n> 查询到进程号： ps -ef | grep java   \n> \n> 杀死进程：  kill  -s 9 xxx\n> \n> 查询具体项目的进程： ps aux | grep test.jar\n\n\n\n\n# 二、war包部署\n## 1、修改pom.xml\n\n```java\n <packaging>war</packaging>\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108225243823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n并增加tomcat依赖：\n\n```java\n        <!-- tomcat -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </dependency>\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108225453935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n## 2、修改启动类\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108225614280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\npublic class XrtweetApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(XrtweetApplication.class, args);\n    }\n\n    //打war包，外部服务器部署\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder springApplicationBuilder){\n        return springApplicationBuilder.sources(XrtweetApplication.class);\n    }\n\n}\n```\n\n## 3、打war包\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108225829849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n然后会在项目的target目录下生成war包，右键选择在文件夹显示\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108225950704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n## 4、部署\n把生成的war包放到tomcat的webapps目录下即可\n\n## 5、修改服务器的tomcar配置\n\n```java\ncd /usr/local/tomcat/apache-tomcat-9.0.34/conf\n```\n\n```java\nvim server.xml\n```\n 然后**新增**一个Service配置\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108230552230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201108230811971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEw,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n  <Service name=\"Catalina1\">\n\n    <Connector port=\"8021\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n\n    <Engine name=\"Catalina1\" defaultHost=\"localhost\">\n\n\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n\n\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n         \n		 <Context path=\"/\" docBase=\"xrtweet-2\" debug=\"0\" reloadable=\"true\"/>\n\n      </Host>\n    </Engine>\n  </Service>\n```\n保存退出\n\n## 6、重启tomcat\n\n```java\n/usr/local/tomcat/apache-tomcat-9.0.34/bin\n```\n关闭\n\n```java\n./shutdown.sh\n```\n\n启动\n\n```java\n./startup.sh\n```\n\n## 7、访问8021端口\n需要在阿里云后台管理-安全组-添加规则-新增一个8021端口访问权限。接着在浏览器输入：\n\nhttp://外网ip:8021/就能访问了', '原创', b'1', b'1', b'1', '2021-01-15 20:14:47', b'1', b'1', '2021-02-23 19:55:34', 38, 1350003757823340545, 1, 0, 0);

-- ----------------------------
-- Table structure for t_blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `t_blog_tags`;
CREATE TABLE `t_blog_tags`  (
  `blogs_id` bigint(20) NOT NULL COMMENT '博客id',
  `tags_id` bigint(20) NOT NULL COMMENT '标签id',
  INDEX `FK5feau0gb4lq47fdb03uboswm8`(`tags_id`) USING BTREE,
  INDEX `FKh4pacwjwofrugxa9hpwaxg6mr`(`blogs_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog_tags
-- ----------------------------
INSERT INTO `t_blog_tags` VALUES (1349746223141113858, 1349746439126798338);
INSERT INTO `t_blog_tags` VALUES (1350003826215661569, 1350009490803556354);
INSERT INTO `t_blog_tags` VALUES (1350016254991171585, 1349746439126798338);
INSERT INTO `t_blog_tags` VALUES (1350017257060728834, 1350017258792976385);
INSERT INTO `t_blog_tags` VALUES (1350017862483345409, 1350017864416919553);
INSERT INTO `t_blog_tags` VALUES (1350053816522887170, 1350053816560635905);
INSERT INTO `t_blog_tags` VALUES (1350053816522887170, 1350053816858431490);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `admin_comment` bit(1) NULL DEFAULT b'0' COMMENT '是否为管理员评论',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '头像',
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '评论内容',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '邮箱',
  `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT 'ip地址',
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '昵称',
  `blog_id` bigint(20) NULL DEFAULT NULL COMMENT '博客id',
  `parent_comment_id` bigint(20) NULL DEFAULT NULL COMMENT '父评论id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FKke3uogd04j4jx316m1p51e05u`(`blog_id`) USING BTREE,
  INDEX `FK4jj284r3pb7japogvo6h72q95`(`parent_comment_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 52 CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (5, b'1', 'http://47.113.92.137:8888/upload/io/img/2020/4/11/1586535025470.jpg', '111', '2020-11-23 21:11:41', '2553378438@qq.com', '0:0:0:0:0:0:0:1', 'admin222', 4, -1);
INSERT INTO `t_comment` VALUES (6, b'1', 'http://47.113.92.137:8888/upload/io/img/2020/4/11/1586535025470.jpg', '222', '2020-11-23 21:11:47', '2553378438@qq.com', '0:0:0:0:0:0:0:1', 'admin222', 4, 5);
INSERT INTO `t_comment` VALUES (8, b'0', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586149620923.png', '222', '2020-11-24 10:57:06', '11@qq.com', '0:0:0:0:0:0:0:1', '11', 7, -1);
INSERT INTO `t_comment` VALUES (9, b'0', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586149620923.png', 'hai\n', '2020-11-24 10:57:19', '11@qq.com', '0:0:0:0:0:0:0:1', '11', 7, 10);
INSERT INTO `t_comment` VALUES (10, b'0', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586149620923.png', '霓虹', '2020-11-24 10:57:28', '11@qq.com', '0:0:0:0:0:0:0:1', '11', 7, 8);
INSERT INTO `t_comment` VALUES (12, NULL, NULL, 'hahha222222', '2021-02-22 11:22:23', '122223@qq.com', NULL, '100222', 4, 6);
INSERT INTO `t_comment` VALUES (13, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', 'hahha222233322', '2021-02-22 11:31:52', '12223323@qq.com', NULL, '10330222', 4, 12);
INSERT INTO `t_comment` VALUES (14, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'haqqqqq3322', '2021-02-22 11:34:43', '12223323@qq.com', NULL, '1qqq0222', 4, 12);
INSERT INTO `t_comment` VALUES (15, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '555', '2021-02-22 12:40:07', '55@qq.com', NULL, '155522', 4, 12);
INSERT INTO `t_comment` VALUES (16, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '55665', '2021-02-22 12:40:53', '55@qq.com', NULL, '156665522', 4, 12);
INSERT INTO `t_comment` VALUES (17, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'AAA', '2021-02-23 15:18:52', 'qaal68@163.com', NULL, 'AAA', -1, -1);
INSERT INTO `t_comment` VALUES (18, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'bbb', '2021-02-23 15:22:25', 'qaal68@163.com', NULL, 'BBB', -1, -1);
INSERT INTO `t_comment` VALUES (19, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'ccc', '2021-02-23 15:29:40', '', NULL, 'ccc', -1, 17);
INSERT INTO `t_comment` VALUES (20, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'ddd', '2021-02-23 15:31:06', '', NULL, 'ddd', -1, 18);
INSERT INTO `t_comment` VALUES (21, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'ddd', '2021-02-23 15:31:27', '', NULL, 'ddd', -1, 19);
INSERT INTO `t_comment` VALUES (22, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'ddd', '2021-02-23 15:32:31', '', NULL, 'dd', -1, 17);
INSERT INTO `t_comment` VALUES (23, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '测试', '2021-02-23 15:54:42', '', NULL, '业主', -1, NULL);
INSERT INTO `t_comment` VALUES (24, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '你好aa', '2021-02-23 16:26:29', 'qaal68@163.com', NULL, '哈哈', -1, 17);
INSERT INTO `t_comment` VALUES (25, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '哈哈bb', '2021-02-23 16:27:47', '', NULL, '别别别', -1, 18);
INSERT INTO `t_comment` VALUES (26, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '可以', '2021-02-23 16:44:06', '', NULL, '可以', -1, 24);
INSERT INTO `t_comment` VALUES (27, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '怎样说', '2021-02-23 16:45:37', '', NULL, '666', -1, -1);
INSERT INTO `t_comment` VALUES (28, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '1111', '2021-02-23 16:51:11', '', NULL, '111', -1, 27);
INSERT INTO `t_comment` VALUES (29, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '222', '2021-02-23 16:52:01', '', NULL, '222', -1, 28);
INSERT INTO `t_comment` VALUES (30, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '111', '2021-02-23 17:07:18', '', '127.0.0.1', '111', 1350003826215661569, -1);
INSERT INTO `t_comment` VALUES (31, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '22', '2021-02-23 17:09:40', '', '127.0.0.1', '22', 1350003826215661569, 30);
INSERT INTO `t_comment` VALUES (32, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '测试', '2021-02-23 17:10:03', '', '127.0.0.1', '测试', 1349746223141113858, -1);
INSERT INTO `t_comment` VALUES (37, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '77', '2021-02-23 20:26:58', '', '127.0.0.1', '77', 1349746223141113858, 32);
INSERT INTO `t_comment` VALUES (38, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '88', '2021-02-23 20:28:49', '', '127.0.0.1', '88', 1349746223141113858, 32);
INSERT INTO `t_comment` VALUES (43, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '嗯呢', '2021-02-26 19:55:48', '1556187290@qq.com', '127.0.0.1', '小L-Admin', 1349746223141113858, 32);
INSERT INTO `t_comment` VALUES (44, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '111', '2021-02-26 21:50:49', '1556187290@qq.com', '127.0.0.1', '小L-Admin', 1349746223141113858, 32);
INSERT INTO `t_comment` VALUES (45, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '', '2021-02-28 18:45:33', '', '127.0.0.1', '', -1, -1);
INSERT INTO `t_comment` VALUES (46, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', '111', '2021-02-28 19:05:14', '', '127.0.0.1', '111', -1, -1);
INSERT INTO `t_comment` VALUES (47, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '333', '2021-02-28 19:06:53', '', '127.0.0.1', '333', -1, -1);
INSERT INTO `t_comment` VALUES (48, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', 'enen', '2021-02-28 19:10:26', '', '127.0.0.1', 'enen', -1, 47);
INSERT INTO `t_comment` VALUES (49, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', 'sss', '2021-02-28 19:18:53', '', '127.0.0.1', 'sss', -1, 48);
INSERT INTO `t_comment` VALUES (50, NULL, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070453827,1163403148&fm=26&gp=0.jpg', 'key ', '2021-02-28 19:24:13', '', '127.0.0.1', 'kk', -1, 48);
INSERT INTO `t_comment` VALUES (51, b'1', 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '222', '2021-02-28 19:45:50', '', '127.0.0.1', '222', -1, 50);

-- ----------------------------
-- Table structure for t_contact
-- ----------------------------
DROP TABLE IF EXISTS `t_contact`;
CREATE TABLE `t_contact`  (
  `id` bigint(20) NOT NULL COMMENT '主键id',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '邮箱',
  `pay_by_wechat` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '微信支付二维码',
  `pay_by_zhi` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '支付宝二维码',
  `qq` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT 'qq账号',
  `wechat` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '微信号',
  `wechat_code` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '微信二维码',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_contact
-- ----------------------------
INSERT INTO `t_contact` VALUES (1, '1556187290@qq.com', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586161248887.png', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586161235821.jpg', '1556187290', 'weixin', 'http://47.113.92.137:8888/upload/io/img/2020/4/6/1586161319792.jpg');

-- ----------------------------
-- Table structure for t_links
-- ----------------------------
DROP TABLE IF EXISTS `t_links`;
CREATE TABLE `t_links`  (
  `id` bigint(20) NOT NULL COMMENT '主键id',
  `blog_address` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '博客地址',
  `blog_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '博客名称',
  `picture_address` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '首图',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_links
-- ----------------------------
INSERT INTO `t_links` VALUES (1, 'https://blog.csdn.net/m0_45234510?spm=1011.2124.3001.5343', 'x-dragon8899', 'https://img0.baidu.com/it/u=1028479771,2944343576&fm=26&fmt=auto&gp=0.jpg', '2021-02-26 20:46:59');
INSERT INTO `t_links` VALUES (1365292219942064129, 'http://localhost:8080/#/admin/linksblog', '哈哈12345', 'https://img0.baidu.com/it/u=2070453827,1163403148&fm=26&fmt=auto&gp=0.jpg', '2021-02-26 22:21:35');

-- ----------------------------
-- Table structure for t_role
-- ----------------------------
DROP TABLE IF EXISTS `t_role`;
CREATE TABLE `t_role`  (
  `id` bigint(10) NOT NULL COMMENT '角色id',
  `name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色名',
  `nameZh` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色中文名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_role
-- ----------------------------
INSERT INTO `t_role` VALUES (1, 'admin', '管理员');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint(20) NOT NULL COMMENT '主键id',
  `color` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '颜色',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1349746439126798338, NULL, 'vue');
INSERT INTO `t_tag` VALUES (1350009490803556354, NULL, 'mybatis');
INSERT INTO `t_tag` VALUES (1350017258792976385, NULL, 'redis');
INSERT INTO `t_tag` VALUES (1350017864416919553, NULL, 'jpa');
INSERT INTO `t_tag` VALUES (1350053816560635905, NULL, 'war');
INSERT INTO `t_tag` VALUES (1350053816858431490, NULL, 'jar');
INSERT INTO `t_tag` VALUES (1365288930756268033, NULL, '哈哈');

-- ----------------------------
-- Table structure for t_traffic
-- ----------------------------
DROP TABLE IF EXISTS `t_traffic`;
CREATE TABLE `t_traffic`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT 'ip地址',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 69 CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_traffic
-- ----------------------------
INSERT INTO `t_traffic` VALUES (1, '2020-11-23 21:10:51', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (2, '2020-11-23 21:12:12', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (3, '2020-11-23 21:12:18', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (4, '2020-11-23 21:18:18', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (5, '2020-11-23 21:48:50', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (6, '2020-11-23 21:57:55', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (7, '2020-11-23 22:01:05', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (8, '2020-11-23 22:07:12', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (9, '2020-11-23 22:07:41', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (10, '2020-11-23 22:09:42', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (11, '2020-11-23 22:14:33', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (12, '2020-11-23 22:20:40', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (13, '2020-11-23 22:21:29', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (14, '2020-11-23 22:21:34', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (15, '2020-11-23 23:31:14', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (16, '2020-11-23 23:35:08', '127.0.0.1');
INSERT INTO `t_traffic` VALUES (17, '2020-11-24 10:15:33', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (18, '2020-11-24 10:16:35', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (19, '2020-11-24 10:17:01', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (20, '2020-11-24 10:17:31', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (21, '2020-11-24 10:17:42', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (22, '2020-11-24 10:18:55', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (23, '2020-11-24 10:19:29', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (24, '2020-11-24 10:22:08', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (25, '2020-11-24 10:22:51', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (26, '2020-11-24 10:23:17', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (27, '2020-11-24 10:23:46', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (28, '2020-11-24 10:24:14', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (29, '2020-11-24 10:25:01', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (30, '2020-11-24 10:25:20', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (31, '2020-11-24 10:26:04', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (32, '2020-11-24 10:26:36', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (33, '2020-11-24 10:26:55', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (34, '2020-11-24 10:27:03', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (35, '2020-11-24 10:27:18', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (36, '2020-11-24 10:30:27', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (37, '2020-11-24 10:31:29', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (38, '2020-11-24 10:31:57', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (39, '2020-11-24 10:34:16', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (40, '2020-11-24 10:39:52', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (41, '2020-11-24 10:40:04', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (42, '2020-11-24 10:40:21', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (43, '2020-11-24 10:42:28', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (44, '2020-11-24 10:42:43', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (45, '2020-11-24 10:43:10', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (46, '2020-11-24 10:43:45', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (47, '2020-11-24 10:44:55', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (48, '2020-11-24 10:45:44', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (49, '2020-11-24 10:46:02', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (50, '2020-11-24 10:47:01', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (51, '2020-11-24 10:50:10', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (52, '2020-11-24 10:51:12', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (53, '2020-11-24 10:51:27', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (54, '2020-11-24 10:56:35', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (55, '2020-11-24 10:58:12', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (56, '2020-11-24 10:59:37', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (57, '2020-11-24 10:59:52', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (58, '2020-11-24 11:00:10', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (59, '2020-11-24 11:01:01', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (60, '2020-11-24 11:22:25', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (61, '2020-11-24 11:22:34', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (62, '2020-11-24 11:24:46', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (63, '2020-11-24 11:36:48', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (64, '2020-11-24 11:42:33', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (65, '2020-11-24 11:43:45', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (66, '2020-11-24 11:45:24', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (67, '2020-11-24 11:50:02', '0:0:0:0:0:0:0:1');
INSERT INTO `t_traffic` VALUES (68, '2020-11-24 12:00:18', '0:0:0:0:0:0:0:1');

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` bigint(20) NOT NULL COMMENT '分类id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '分类名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES (1350003757823340545, 'springboot');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` bigint(20) NOT NULL COMMENT '用户id',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '头像',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '邮箱',
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '昵称',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '密码',
  `type` int(11) NULL DEFAULT NULL COMMENT '角色',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NULL DEFAULT NULL COMMENT '用户名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1028479771,2944343576&fm=26&gp=0.jpg', '2020-05-19 15:30:23', '1556187290@qq.com', 'admin222', '$2a$10$ySG2lkvjFHY5O0./CPIE1OI8VJsuKYEzOYzqIa7AJR6sEgSzUFOAm', 1, '2020-11-24 12:22:09', 'admin');

-- ----------------------------
-- Table structure for t_user_role
-- ----------------------------
DROP TABLE IF EXISTS `t_user_role`;
CREATE TABLE `t_user_role`  (
  `id` int(11) NOT NULL COMMENT '用户角色id',
  `uid` int(11) NULL DEFAULT NULL COMMENT '用户id',
  `rid` int(11) NULL DEFAULT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user_role
-- ----------------------------
INSERT INTO `t_user_role` VALUES (1, 1, 1);

SET FOREIGN_KEY_CHECKS = 1;
